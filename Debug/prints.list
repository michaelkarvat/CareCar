
prints.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08002190  08002190  00003190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800267c  0800267c  00004078  2**0
                  CONTENTS
  4 .ARM          00000008  0800267c  0800267c  0000367c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002684  08002684  00004078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002684  08002684  00003684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002688  08002688  00003688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800268c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000078  08002704  00004078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08002704  000043a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002aa4  00000000  00000000  000040a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001084  00000000  00000000  00006b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  00007bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001bf  00000000  00000000  00007e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019640  00000000  00000000  0000802f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005551  00000000  00000000  0002166f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087047  00000000  00000000  00026bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adc07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001208  00000000  00000000  000adc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000aee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002178 	.word	0x08002178

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08002178 	.word	0x08002178

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <event_manager_handler>:
#include "types.h"
//#include "terminal.h"
#include "timer2.h"
#include "scheduler.h"

void event_manager_handler(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b092      	sub	sp, #72	@ 0x48
 8000294:	af00      	add	r7, sp, #0
    printf("Event manager handler\n");
 8000296:	4811      	ldr	r0, [pc, #68]	@ (80002dc <event_manager_handler+0x4c>)
 8000298:	f000 ff92 	bl	80011c0 <puts>

    int i = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	647b      	str	r3, [r7, #68]	@ 0x44
    while (1) {

        if (USART2_commandReceived()) {
 80002a0:	f000 fd20 	bl	8000ce4 <USART2_commandReceived>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <event_manager_handler+0x1e>
            TERMINAL_handleCommand();
 80002aa:	f000 fb05 	bl	80008b8 <TERMINAL_handleCommand>
        }

        if (TIMER2_expired()) {
 80002ae:	f000 fb85 	bl	80009bc <TIMER2_expired>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <event_manager_handler+0x2c>
            SCHEDULER_handle();
 80002b8:	f000 fab0 	bl	800081c <SCHEDULER_handle>
            SCHEDULER_send_command();
        }
        */

        //received command from the sim.
        if (USART1_commandReceived()){
 80002bc:	f000 fc48 	bl	8000b50 <USART1_commandReceived>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0ec      	beq.n	80002a0 <event_manager_handler+0x10>
        	char response[64];
			USART1_getCommand(response);
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fc55 	bl	8000b78 <USART1_getCommand>
			print("SIMCom => %s\n", response);
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4619      	mov	r1, r3
 80002d2:	4803      	ldr	r0, [pc, #12]	@ (80002e0 <event_manager_handler+0x50>)
 80002d4:	f000 fcee 	bl	8000cb4 <print>
        if (USART2_commandReceived()) {
 80002d8:	e7e2      	b.n	80002a0 <event_manager_handler+0x10>
 80002da:	bf00      	nop
 80002dc:	08002190 	.word	0x08002190
 80002e0:	080021a8 	.word	0x080021a8

080002e4 <hx711_gpio_init>:
{
    while(count--);
}

void hx711_gpio_init(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
    // Enable GPIOB clock (bit 18 in AHBENR)
    RCC->AHBENR |= (1 << 18);
 80002e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <hx711_gpio_init+0x40>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <hx711_gpio_init+0x40>)
 80002ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002f2:	6153      	str	r3, [r2, #20]
    // Configure PB0 as output (for PD_SCK)
    GPIOB->MODER &= ~(3 << (0*2));
 80002f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <hx711_gpio_init+0x44>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000328 <hx711_gpio_init+0x44>)
 80002fa:	f023 0303 	bic.w	r3, r3, #3
 80002fe:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (0*2));
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <hx711_gpio_init+0x44>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	@ (8000328 <hx711_gpio_init+0x44>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]
    // Configure PB1 as input (for DOUT)
    GPIOB->MODER &= ~(3 << (1*2));
 800030c:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <hx711_gpio_init+0x44>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <hx711_gpio_init+0x44>)
 8000312:	f023 030c 	bic.w	r3, r3, #12
 8000316:	6013      	str	r3, [r2, #0]
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	48000400 	.word	0x48000400

0800032c <hx711_parent_gpio_init>:
{
    while(count--);
}

void hx711_parent_gpio_init(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
    // 1) Enable GPIOB clock (bit 18 in AHBENR)
    RCC->AHBENR |= (1U << 18);
 8000330:	4b0e      	ldr	r3, [pc, #56]	@ (800036c <hx711_parent_gpio_init+0x40>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <hx711_parent_gpio_init+0x40>)
 8000336:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800033a:	6153      	str	r3, [r2, #20]

    // 2) Configure PB2 as output (PD_SCK)
    GPIOB->MODER &= ~(3U << (2 * 2));
 800033c:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <hx711_parent_gpio_init+0x44>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a0b      	ldr	r2, [pc, #44]	@ (8000370 <hx711_parent_gpio_init+0x44>)
 8000342:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000346:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1U << (2 * 2));
 8000348:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <hx711_parent_gpio_init+0x44>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a08      	ldr	r2, [pc, #32]	@ (8000370 <hx711_parent_gpio_init+0x44>)
 800034e:	f043 0310 	orr.w	r3, r3, #16
 8000352:	6013      	str	r3, [r2, #0]

    // 3) Configure PB3 as input (DOUT)
    GPIOB->MODER &= ~(3U << (3 * 2));
 8000354:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <hx711_parent_gpio_init+0x44>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a05      	ldr	r2, [pc, #20]	@ (8000370 <hx711_parent_gpio_init+0x44>)
 800035a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	48000400 	.word	0x48000400

08000374 <main>:
#include "event_manager.h"
//#include "processing.h"


int main()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

	//inti all the modules
    print("System init start\n");
 8000378:	4811      	ldr	r0, [pc, #68]	@ (80003c0 <main+0x4c>)
 800037a:	f000 fc9b 	bl	8000cb4 <print>
    // 1) Init debug USART2 (PC connection).
    USART2_init();
 800037e:	f000 fcd3 	bl	8000d28 <USART2_init>
    print("USART2 (PC) initialized.\n");
 8000382:	4810      	ldr	r0, [pc, #64]	@ (80003c4 <main+0x50>)
 8000384:	f000 fc96 	bl	8000cb4 <print>

    // 2) Init USART1 for SIMCom (PA9/PA10, 115200).
    USART1_init();
 8000388:	f000 fbd4 	bl	8000b34 <USART1_init>
    print("USART1 (SIMCom) initialized at 115200.\n");
 800038c:	480e      	ldr	r0, [pc, #56]	@ (80003c8 <main+0x54>)
 800038e:	f000 fc91 	bl	8000cb4 <print>

    TIMER2_init();
 8000392:	f000 fb27 	bl	80009e4 <TIMER2_init>
    hx711_gpio_init();
 8000396:	f7ff ffa5 	bl	80002e4 <hx711_gpio_init>
    hx711_parent_gpio_init();
 800039a:	f7ff ffc7 	bl	800032c <hx711_parent_gpio_init>

    // 3) Send basic "AT" command to the SIMCom.
    USART1_print("AT\r\n");
 800039e:	480b      	ldr	r0, [pc, #44]	@ (80003cc <main+0x58>)
 80003a0:	f000 fbf8 	bl	8000b94 <USART1_print>
    print("Sent 'AT' to SIMCom.\n");
 80003a4:	480a      	ldr	r0, [pc, #40]	@ (80003d0 <main+0x5c>)
 80003a6:	f000 fc85 	bl	8000cb4 <print>
    USART1_print("AT+COPS=?\r\n");
 80003aa:	480a      	ldr	r0, [pc, #40]	@ (80003d4 <main+0x60>)
 80003ac:	f000 fbf2 	bl	8000b94 <USART1_print>
    //AT+COPS=?

    MHZ19_USART1_init();
 80003b0:	f000 f898 	bl	80004e4 <MHZ19_USART1_init>

    /*==============================================*/

    event_manager_handler();
 80003b4:	f7ff ff6c 	bl	8000290 <event_manager_handler>

    return 0;
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	080021b8 	.word	0x080021b8
 80003c4:	080021cc 	.word	0x080021cc
 80003c8:	080021e8 	.word	0x080021e8
 80003cc:	08002210 	.word	0x08002210
 80003d0:	08002218 	.word	0x08002218
 80003d4:	08002230 	.word	0x08002230

080003d8 <MHZ19_checksum>:

static const uint8_t MHZ19_Read_Cmd[MHZ19_FRAME_LENGTH] = {
    0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79
};

static uint8_t MHZ19_checksum(const uint8_t *packet) {
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
    uint8_t sum = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < 8; i++) {
 80003e4:	2301      	movs	r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	e009      	b.n	80003fe <MHZ19_checksum+0x26>
        sum += packet[i];
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	781a      	ldrb	r2, [r3, #0]
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	4413      	add	r3, r2
 80003f6:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < 8; i++) {
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	3301      	adds	r3, #1
 80003fc:	60bb      	str	r3, [r7, #8]
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	2b07      	cmp	r3, #7
 8000402:	ddf2      	ble.n	80003ea <MHZ19_checksum+0x12>
    }
    return (uint8_t)(0xFF - sum + 1);
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	425b      	negs	r3, r3
 8000408:	b2db      	uxtb	r3, r3
}
 800040a:	4618      	mov	r0, r3
 800040c:	3714      	adds	r7, #20
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <MHZ19_read>:

BOOL MHZ19_read(int *ppm, int *temperature) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
    // 1) Send the “read CO2” command
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++) {
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	e009      	b.n	800043c <MHZ19_read+0x24>
        MHZ19_USART1_printCharacter(MHZ19_Read_Cmd[i]);
 8000428:	4a1e      	ldr	r2, [pc, #120]	@ (80004a4 <MHZ19_read+0x8c>)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f885 	bl	8000540 <MHZ19_USART1_printCharacter>
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++) {
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	2b08      	cmp	r3, #8
 8000440:	ddf2      	ble.n	8000428 <MHZ19_read+0x10>
    }

    // 2) Wait for data from the sensor (via interrupt)
    if (!MHZ19_USART1_dataAvailable()) {
 8000442:	f000 f897 	bl	8000574 <MHZ19_USART1_dataAvailable>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d101      	bne.n	8000450 <MHZ19_read+0x38>
        return FALSE;
 800044c:	2300      	movs	r3, #0
 800044e:	e024      	b.n	800049a <MHZ19_read+0x82>
    }

    // 3) Grab the frame
    uint8_t response[MHZ19_FRAME_LENGTH];
    MHZ19_USART1_getData(response);
 8000450:	f107 0308 	add.w	r3, r7, #8
 8000454:	4618      	mov	r0, r3
 8000456:	f000 f899 	bl	800058c <MHZ19_USART1_getData>

    // 4) Validate header and checksum
    if (response[0] != 0xFF || response[1] != 0x86) {
 800045a:	7a3b      	ldrb	r3, [r7, #8]
 800045c:	2bff      	cmp	r3, #255	@ 0xff
 800045e:	d102      	bne.n	8000466 <MHZ19_read+0x4e>
 8000460:	7a7b      	ldrb	r3, [r7, #9]
 8000462:	2b86      	cmp	r3, #134	@ 0x86
 8000464:	d001      	beq.n	800046a <MHZ19_read+0x52>
        return FALSE;
 8000466:	2300      	movs	r3, #0
 8000468:	e017      	b.n	800049a <MHZ19_read+0x82>
    }
    if (MHZ19_checksum(response) != response[8]) {
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ffb2 	bl	80003d8 <MHZ19_checksum>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	7c3b      	ldrb	r3, [r7, #16]
 800047a:	429a      	cmp	r2, r3
 800047c:	d001      	beq.n	8000482 <MHZ19_read+0x6a>
        return FALSE;
 800047e:	2300      	movs	r3, #0
 8000480:	e00b      	b.n	800049a <MHZ19_read+0x82>
    }

    // 5) Parse values
    *ppm         = ((int)response[2] << 8) | response[3];
 8000482:	7abb      	ldrb	r3, [r7, #10]
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	7afa      	ldrb	r2, [r7, #11]
 8000488:	431a      	orrs	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
    *temperature = (int)response[4] - 40;
 800048e:	7b3b      	ldrb	r3, [r7, #12]
 8000490:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	601a      	str	r2, [r3, #0]

    return TRUE;
 8000498:	2301      	movs	r3, #1
}
 800049a:	4618      	mov	r0, r3
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	0800253c 	.word	0x0800253c

080004a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	db0b      	blt.n	80004d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	f003 021f 	and.w	r2, r3, #31
 80004c0:	4907      	ldr	r1, [pc, #28]	@ (80004e0 <__NVIC_EnableIRQ+0x38>)
 80004c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c6:	095b      	lsrs	r3, r3, #5
 80004c8:	2001      	movs	r0, #1
 80004ca:	fa00 f202 	lsl.w	r2, r0, r2
 80004ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000e100 	.word	0xe000e100

080004e4 <MHZ19_USART1_init>:
static volatile uint8_t g_rxBuffer[MHZ19_FRAME_LENGTH];
static volatile uint8_t g_rxIndex = 0;
static volatile BOOL    g_dataReady = FALSE;

void MHZ19_USART1_init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    // Enable GPIOA clock.
    RCC->AHBENR |= 0x00020000;
 80004e8:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MHZ19_USART1_init+0x54>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a12      	ldr	r2, [pc, #72]	@ (8000538 <MHZ19_USART1_init+0x54>)
 80004ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f2:	6153      	str	r3, [r2, #20]
    // Enable USART1 clock on APB2.
    RCC->APB2ENR |= 0x00004000;
 80004f4:	4b10      	ldr	r3, [pc, #64]	@ (8000538 <MHZ19_USART1_init+0x54>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000538 <MHZ19_USART1_init+0x54>)
 80004fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004fe:	6193      	str	r3, [r2, #24]
    // Configure PA9 (TX) and PA10 (RX) as alternate function mode.
    GPIOA->MODER |= 0x00280000;
 8000500:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800050a:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800050e:	6013      	str	r3, [r2, #0]
    // Set alternate function AF7 for PA9 and PA10.
    GPIOA->AFR[1] |= 0x00000770;
 8000510:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000516:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800051a:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800051e:	6253      	str	r3, [r2, #36]	@ 0x24
    // Set baud rate to 9600 @ 8 MHz (833 decimal).
    USART1->BRR = 833;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MHZ19_USART1_init+0x58>)
 8000522:	f240 3241 	movw	r2, #833	@ 0x341
 8000526:	60da      	str	r2, [r3, #12]
    // Enable USART1, RX, TX, and RX interrupt.
    USART1->CR1 = 0x2D;
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <MHZ19_USART1_init+0x58>)
 800052a:	222d      	movs	r2, #45	@ 0x2d
 800052c:	601a      	str	r2, [r3, #0]
    // Enable USART1 IRQ in NVIC.
    NVIC_EnableIRQ(USART1_IRQn);
 800052e:	2025      	movs	r0, #37	@ 0x25
 8000530:	f7ff ffba 	bl	80004a8 <__NVIC_EnableIRQ>
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	40013800 	.word	0x40013800

08000540 <MHZ19_USART1_printCharacter>:

void MHZ19_USART1_printCharacter(char c)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
    USART1->TDR = (uint8_t)c;
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MHZ19_USART1_printCharacter+0x30>)
 800054c:	79fa      	ldrb	r2, [r7, #7]
 800054e:	b292      	uxth	r2, r2
 8000550:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (!(USART1->ISR & 0x80));  // Wait for TXE flag.
 8000552:	bf00      	nop
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MHZ19_USART1_printCharacter+0x30>)
 8000556:	69db      	ldr	r3, [r3, #28]
 8000558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800055c:	2b00      	cmp	r3, #0
 800055e:	d0f9      	beq.n	8000554 <MHZ19_USART1_printCharacter+0x14>
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40013800 	.word	0x40013800

08000574 <MHZ19_USART1_dataAvailable>:
        MHZ19_USART1_printCharacter(*p_data++);
    }
}

BOOL MHZ19_USART1_dataAvailable(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
    return g_dataReady;
 8000578:	4b03      	ldr	r3, [pc, #12]	@ (8000588 <MHZ19_USART1_dataAvailable+0x14>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	2000009e 	.word	0x2000009e

0800058c <MHZ19_USART1_getData>:

void MHZ19_USART1_getData(uint8_t *dest)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e00b      	b.n	80005b2 <MHZ19_USART1_getData+0x26>
    {
        dest[i] = g_rxBuffer[i];
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	490a      	ldr	r1, [pc, #40]	@ (80005cc <MHZ19_USART1_getData+0x40>)
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	440a      	add	r2, r1
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3301      	adds	r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b08      	cmp	r3, #8
 80005b6:	ddf0      	ble.n	800059a <MHZ19_USART1_getData+0xe>
    }
    g_dataReady = FALSE;
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <MHZ19_USART1_getData+0x44>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000094 	.word	0x20000094
 80005d0:	2000009e 	.word	0x2000009e

080005d4 <USART1_EXTI25_IRQHandler>:

// USART1 Interrupt Handler
// Make sure the IRQ handler name matches the startup file.
void USART1_EXTI25_IRQHandler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
    // Reading RDR clears the RXNE flag.
    uint8_t rx_byte = (uint8_t)(USART1->RDR & 0xFF);
 80005da:	4b10      	ldr	r3, [pc, #64]	@ (800061c <USART1_EXTI25_IRQHandler+0x48>)
 80005dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80005de:	b29b      	uxth	r3, r3
 80005e0:	71fb      	strb	r3, [r7, #7]
    g_rxBuffer[g_rxIndex++] = rx_byte;
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <USART1_EXTI25_IRQHandler+0x4c>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	b2d1      	uxtb	r1, r2
 80005ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <USART1_EXTI25_IRQHandler+0x4c>)
 80005ee:	7011      	strb	r1, [r2, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <USART1_EXTI25_IRQHandler+0x50>)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	5453      	strb	r3, [r2, r1]
    if (g_rxIndex >= MHZ19_FRAME_LENGTH)
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <USART1_EXTI25_IRQHandler+0x4c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d905      	bls.n	800060e <USART1_EXTI25_IRQHandler+0x3a>
    {
        g_dataReady = TRUE;
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <USART1_EXTI25_IRQHandler+0x54>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
        g_rxIndex = 0;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <USART1_EXTI25_IRQHandler+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
    }
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40013800 	.word	0x40013800
 8000620:	2000009d 	.word	0x2000009d
 8000624:	20000094 	.word	0x20000094
 8000628:	2000009e 	.word	0x2000009e

0800062c <ALG_handle>:
} SystemState;

static SystemState currentState = STATE_SAFE;
static int alertCounter = 0;

void ALG_handle(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
    // 1) Read child weight
    //unsigned long childWeight = HX711_Read();
	unsigned long childWeight = PARENT_WEIGHT_PROVIDED;
 8000632:	2314      	movs	r3, #20
 8000634:	617b      	str	r3, [r7, #20]
    print("Child raw weight: %lu\r\n", childWeight);
 8000636:	6979      	ldr	r1, [r7, #20]
 8000638:	483b      	ldr	r0, [pc, #236]	@ (8000728 <ALG_handle+0xfc>)
 800063a:	f000 fb3b 	bl	8000cb4 <print>

    // 2) Use provided parent weight
    //unsigned long driverWeight = HX711_Parent_Read();
    unsigned long driverWeight = PARENT_WEIGHT_PROVIDED;
 800063e:	2314      	movs	r3, #20
 8000640:	613b      	str	r3, [r7, #16]
    print("parent raw weight: %lu\r\n", driverWeight);
 8000642:	6939      	ldr	r1, [r7, #16]
 8000644:	4839      	ldr	r0, [pc, #228]	@ (800072c <ALG_handle+0x100>)
 8000646:	f000 fb35 	bl	8000cb4 <print>

    // 3) Read CO₂ & temperature
    int co2_ppm, temp_c;
    if (MHZ19_read(&co2_ppm, &temp_c)) {
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fee0 	bl	8000418 <MHZ19_read>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <ALG_handle+0x40>
        print("CO2 = %d ppm, Temp = %d °C\r\n", co2_ppm, temp_c);
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4619      	mov	r1, r3
 8000664:	4832      	ldr	r0, [pc, #200]	@ (8000730 <ALG_handle+0x104>)
 8000666:	f000 fb25 	bl	8000cb4 <print>
 800066a:	e002      	b.n	8000672 <ALG_handle+0x46>
    } else {
        print("MHZ19 read failed\r\n");
 800066c:	4831      	ldr	r0, [pc, #196]	@ (8000734 <ALG_handle+0x108>)
 800066e:	f000 fb21 	bl	8000cb4 <print>
    }

    // 4) Evaluate flags
    BOOL parentPresent = (driverWeight > 0) ? TRUE : FALSE;
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	73fb      	strb	r3, [r7, #15]
    BOOL childPresent  = (childWeight >= CHILD_WEIGHT_THRESHOLD) ? TRUE : FALSE;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf8c      	ite	hi
 8000686:	2301      	movhi	r3, #1
 8000688:	2300      	movls	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	73bb      	strb	r3, [r7, #14]
    BOOL envUnsafe     = (temp_c > TEMPERATURE_THRESHOLD) || (co2_ppm > CO2_THRESHOLD);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b1e      	cmp	r3, #30
 8000692:	dc03      	bgt.n	800069c <ALG_handle+0x70>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800069a:	dd01      	ble.n	80006a0 <ALG_handle+0x74>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <ALG_handle+0x76>
 80006a0:	2300      	movs	r3, #0
 80006a2:	737b      	strb	r3, [r7, #13]

    print("Flags: parentPresent=%d, childPresent=%d, envUnsafe=%d\r\n",
 80006a4:	7bf9      	ldrb	r1, [r7, #15]
 80006a6:	7bba      	ldrb	r2, [r7, #14]
 80006a8:	7b7b      	ldrb	r3, [r7, #13]
 80006aa:	4823      	ldr	r0, [pc, #140]	@ (8000738 <ALG_handle+0x10c>)
 80006ac:	f000 fb02 	bl	8000cb4 <print>
          parentPresent, childPresent, envUnsafe);

    // 5) Simplified alert logic
    if (childPresent && (!parentPresent || envUnsafe)) {
 80006b0:	7bbb      	ldrb	r3, [r7, #14]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d011      	beq.n	80006da <ALG_handle+0xae>
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <ALG_handle+0x96>
 80006bc:	7b7b      	ldrb	r3, [r7, #13]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00b      	beq.n	80006da <ALG_handle+0xae>
        alertCounter++;
 80006c2:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <ALG_handle+0x110>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <ALG_handle+0x110>)
 80006ca:	6013      	str	r3, [r2, #0]
        print("Condition met; alertCounter=%d\r\n", alertCounter);
 80006cc:	4b1b      	ldr	r3, [pc, #108]	@ (800073c <ALG_handle+0x110>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	481b      	ldr	r0, [pc, #108]	@ (8000740 <ALG_handle+0x114>)
 80006d4:	f000 faee 	bl	8000cb4 <print>
 80006d8:	e009      	b.n	80006ee <ALG_handle+0xc2>
    } else {
        if (alertCounter) {
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <ALG_handle+0x110>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d005      	beq.n	80006ee <ALG_handle+0xc2>
            alertCounter = 0;
 80006e2:	4b16      	ldr	r3, [pc, #88]	@ (800073c <ALG_handle+0x110>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
            print("Condition cleared; alertCounter reset\r\n");
 80006e8:	4816      	ldr	r0, [pc, #88]	@ (8000744 <ALG_handle+0x118>)
 80006ea:	f000 fae3 	bl	8000cb4 <print>
        }
    }

    // 6) State transition
    if (alertCounter >= ALERT_COUNT_REQUIRED) {
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <ALG_handle+0x110>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	dd0a      	ble.n	800070c <ALG_handle+0xe0>
        if (currentState != STATE_ALERT_TRIGGERED) {
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <ALG_handle+0x11c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d010      	beq.n	8000720 <ALG_handle+0xf4>
            currentState = STATE_ALERT_TRIGGERED;
 80006fe:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <ALG_handle+0x11c>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
            print(" ** Transition to STATE_ALERT_TRIGGERED **\r\n");
 8000704:	4811      	ldr	r0, [pc, #68]	@ (800074c <ALG_handle+0x120>)
 8000706:	f000 fad5 	bl	8000cb4 <print>
        if (currentState != STATE_SAFE) {
            currentState = STATE_SAFE;
            print(" ** Transition to STATE_SAFE **\r\n");
        }
    }
}
 800070a:	e009      	b.n	8000720 <ALG_handle+0xf4>
        if (currentState != STATE_SAFE) {
 800070c:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <ALG_handle+0x11c>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d005      	beq.n	8000720 <ALG_handle+0xf4>
            currentState = STATE_SAFE;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <ALG_handle+0x11c>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
            print(" ** Transition to STATE_SAFE **\r\n");
 800071a:	480d      	ldr	r0, [pc, #52]	@ (8000750 <ALG_handle+0x124>)
 800071c:	f000 faca 	bl	8000cb4 <print>
}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	0800223c 	.word	0x0800223c
 800072c:	08002254 	.word	0x08002254
 8000730:	08002270 	.word	0x08002270
 8000734:	08002290 	.word	0x08002290
 8000738:	080022a4 	.word	0x080022a4
 800073c:	200000a0 	.word	0x200000a0
 8000740:	080022e0 	.word	0x080022e0
 8000744:	08002304 	.word	0x08002304
 8000748:	2000009f 	.word	0x2000009f
 800074c:	0800232c 	.word	0x0800232c
 8000750:	0800235c 	.word	0x0800235c

08000754 <ALG_reset>:

void ALG_reset(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
    currentState = STATE_SAFE;
 8000758:	4b05      	ldr	r3, [pc, #20]	@ (8000770 <ALG_reset+0x1c>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
    alertCounter = 0;
 800075e:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <ALG_reset+0x20>)
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
    print("ALG_reset: back to STATE_SAFE, alertCounter=0\r\n");
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <ALG_reset+0x24>)
 8000766:	f000 faa5 	bl	8000cb4 <print>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000009f 	.word	0x2000009f
 8000774:	200000a0 	.word	0x200000a0
 8000778:	08002380 	.word	0x08002380

0800077c <ALG_isAlertTriggered>:

BOOL ALG_isAlertTriggered(void) {
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
    //print("ALG_isAlertTriggered: state=%d\r\n", currentState);
    return (currentState == STATE_ALERT_TRIGGERED);
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <ALG_isAlertTriggered+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	bf0c      	ite	eq
 8000788:	2301      	moveq	r3, #1
 800078a:	2300      	movne	r3, #0
 800078c:	b2db      	uxtb	r3, r3
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	2000009f 	.word	0x2000009f

0800079c <SCHEDULER_send_command>:
static SchedState schedState = SCHED_STATE_REGULAR;
static int        suppressionCounter = 0;

/// Send the actual alert (called once in CONTACT state)
void SCHEDULER_send_command(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
    print("******************** Alert: Child left in car! *******************\n");
 80007a2:	4811      	ldr	r0, [pc, #68]	@ (80007e8 <SCHEDULER_send_command+0x4c>)
 80007a4:	f000 fa86 	bl	8000cb4 <print>
    // Wake up SIM module
    USART1_print("AT\r\n");
 80007a8:	4810      	ldr	r0, [pc, #64]	@ (80007ec <SCHEDULER_send_command+0x50>)
 80007aa:	f000 f9f3 	bl	8000b94 <USART1_print>
    print("Sent 'AT' to SIMCom.\n");
 80007ae:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <SCHEDULER_send_command+0x54>)
 80007b0:	f000 fa80 	bl	8000cb4 <print>

    // Dial the currently configured number
    char cmd[PHONE_NUMBER_MAX_LEN + 8];
    int n = snprintf(cmd, sizeof(cmd), "ATD%s;\r\n", g_phoneNumber);
 80007b4:	4638      	mov	r0, r7
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <SCHEDULER_send_command+0x58>)
 80007b8:	4a0f      	ldr	r2, [pc, #60]	@ (80007f8 <SCHEDULER_send_command+0x5c>)
 80007ba:	211c      	movs	r1, #28
 80007bc:	f000 fd08 	bl	80011d0 <sniprintf>
 80007c0:	61f8      	str	r0, [r7, #28]
    if (n > 0 && n < (int)sizeof(cmd)) {
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dd07      	ble.n	80007d8 <SCHEDULER_send_command+0x3c>
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	2b1b      	cmp	r3, #27
 80007cc:	dc04      	bgt.n	80007d8 <SCHEDULER_send_command+0x3c>
        USART1_print(cmd);
 80007ce:	463b      	mov	r3, r7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f9df 	bl	8000b94 <USART1_print>
 80007d6:	e003      	b.n	80007e0 <SCHEDULER_send_command+0x44>
    } else {
        print("Error: phone number too long\n");
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <SCHEDULER_send_command+0x60>)
 80007da:	f000 fa6b 	bl	8000cb4 <print>
    }
}
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	080023b0 	.word	0x080023b0
 80007ec:	080023f4 	.word	0x080023f4
 80007f0:	080023fc 	.word	0x080023fc
 80007f4:	20000000 	.word	0x20000000
 80007f8:	08002414 	.word	0x08002414
 80007fc:	08002420 	.word	0x08002420

08000800 <SCHEDULER_HANG_UP_CALL>:

/// Hang up an ongoing call
void SCHEDULER_HANG_UP_CALL(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    print("Scheduler_handle: Hanging up call\n");
 8000804:	4803      	ldr	r0, [pc, #12]	@ (8000814 <SCHEDULER_HANG_UP_CALL+0x14>)
 8000806:	f000 fa55 	bl	8000cb4 <print>
    USART1_print("AT+CHUP\r\n");
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <SCHEDULER_HANG_UP_CALL+0x18>)
 800080c:	f000 f9c2 	bl	8000b94 <USART1_print>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08002440 	.word	0x08002440
 8000818:	08002464 	.word	0x08002464

0800081c <SCHEDULER_handle>:

/// This runs once per second (driven by event_manager → TIMER2_expired)
void SCHEDULER_handle(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    switch (schedState)
 8000820:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <SCHEDULER_handle+0x74>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d01a      	beq.n	800085e <SCHEDULER_handle+0x42>
 8000828:	2b02      	cmp	r3, #2
 800082a:	dc2f      	bgt.n	800088c <SCHEDULER_handle+0x70>
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <SCHEDULER_handle+0x1a>
 8000830:	2b01      	cmp	r3, #1
 8000832:	d00b      	beq.n	800084c <SCHEDULER_handle+0x30>
                SCHEDULER_HANG_UP_CALL();
                schedState = SCHED_STATE_REGULAR;
            }
            break;
    }
}
 8000834:	e02a      	b.n	800088c <SCHEDULER_handle+0x70>
            ALG_handle();
 8000836:	f7ff fef9 	bl	800062c <ALG_handle>
            if (triger_alert())
 800083a:	f000 f82f 	bl	800089c <triger_alert>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d022      	beq.n	800088a <SCHEDULER_handle+0x6e>
                schedState = SCHED_STATE_CONTACT;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <SCHEDULER_handle+0x74>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
            break;
 800084a:	e01e      	b.n	800088a <SCHEDULER_handle+0x6e>
            SCHEDULER_send_command();
 800084c:	f7ff ffa6 	bl	800079c <SCHEDULER_send_command>
            suppressionCounter = ALERT_SUPPRESSION_SECONDS;
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <SCHEDULER_handle+0x78>)
 8000852:	2214      	movs	r2, #20
 8000854:	601a      	str	r2, [r3, #0]
            schedState = SCHED_STATE_DELAY;
 8000856:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <SCHEDULER_handle+0x74>)
 8000858:	2202      	movs	r2, #2
 800085a:	701a      	strb	r2, [r3, #0]
            break;
 800085c:	e016      	b.n	800088c <SCHEDULER_handle+0x70>
            if (suppressionCounter > 0)
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <SCHEDULER_handle+0x78>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd0b      	ble.n	800087e <SCHEDULER_handle+0x62>
                suppressionCounter--;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <SCHEDULER_handle+0x78>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	3b01      	subs	r3, #1
 800086c:	4a09      	ldr	r2, [pc, #36]	@ (8000894 <SCHEDULER_handle+0x78>)
 800086e:	6013      	str	r3, [r2, #0]
                print("CALLING : %d seconds remaining\n", suppressionCounter);
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <SCHEDULER_handle+0x78>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	4808      	ldr	r0, [pc, #32]	@ (8000898 <SCHEDULER_handle+0x7c>)
 8000878:	f000 fa1c 	bl	8000cb4 <print>
            break;
 800087c:	e006      	b.n	800088c <SCHEDULER_handle+0x70>
                SCHEDULER_HANG_UP_CALL();
 800087e:	f7ff ffbf 	bl	8000800 <SCHEDULER_HANG_UP_CALL>
                schedState = SCHED_STATE_REGULAR;
 8000882:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <SCHEDULER_handle+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
            break;
 8000888:	e000      	b.n	800088c <SCHEDULER_handle+0x70>
            break;
 800088a:	bf00      	nop
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000a4 	.word	0x200000a4
 8000894:	200000a8 	.word	0x200000a8
 8000898:	08002470 	.word	0x08002470

0800089c <triger_alert>:

/// Helper: detect and clear an ALG alert flag
BOOL triger_alert(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    if (ALG_isAlertTriggered())
 80008a0:	f7ff ff6c 	bl	800077c <ALG_isAlertTriggered>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d003      	beq.n	80008b2 <triger_alert+0x16>
    {
        ALG_reset();
 80008aa:	f7ff ff53 	bl	8000754 <ALG_reset>
        return TRUE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <triger_alert+0x18>
    }
    return FALSE;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <TERMINAL_handleCommand>:
#include "scheduler.h"

static char A_Command_Buffer[TERMINAL_SIZE_OF_COMMAND_BUFFER];

void TERMINAL_handleCommand(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
    USART2_getCommand(A_Command_Buffer);
 80008be:	481f      	ldr	r0, [pc, #124]	@ (800093c <TERMINAL_handleCommand+0x84>)
 80008c0:	f000 fa24 	bl	8000d0c <USART2_getCommand>
    print("<=+=+= %s =+=+=>\n", A_Command_Buffer);
 80008c4:	491d      	ldr	r1, [pc, #116]	@ (800093c <TERMINAL_handleCommand+0x84>)
 80008c6:	481e      	ldr	r0, [pc, #120]	@ (8000940 <TERMINAL_handleCommand+0x88>)
 80008c8:	f000 f9f4 	bl	8000cb4 <print>

    const char *prefix = "setnum ";
 80008cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <TERMINAL_handleCommand+0x8c>)
 80008ce:	61fb      	str	r3, [r7, #28]
    if (strncmp(A_Command_Buffer, prefix, strlen(prefix)) == 0) {
 80008d0:	69f8      	ldr	r0, [r7, #28]
 80008d2:	f7ff fc85 	bl	80001e0 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	461a      	mov	r2, r3
 80008da:	69f9      	ldr	r1, [r7, #28]
 80008dc:	4817      	ldr	r0, [pc, #92]	@ (800093c <TERMINAL_handleCommand+0x84>)
 80008de:	f000 fdf0 	bl	80014c2 <strncmp>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d124      	bne.n	8000932 <TERMINAL_handleCommand+0x7a>
        char *newNum = A_Command_Buffer + strlen(prefix);
 80008e8:	69f8      	ldr	r0, [r7, #28]
 80008ea:	f7ff fc79 	bl	80001e0 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a12      	ldr	r2, [pc, #72]	@ (800093c <TERMINAL_handleCommand+0x84>)
 80008f2:	4413      	add	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]

        // Build a formatted number with leading '+'
        char formatted[PHONE_NUMBER_MAX_LEN];
        if (newNum[0] != '+') {
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80008fc:	d006      	beq.n	800090c <TERMINAL_handleCommand+0x54>
            // prepend '+'
            snprintf(formatted, sizeof(formatted), "+%s", newNum);
 80008fe:	1d38      	adds	r0, r7, #4
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	4a11      	ldr	r2, [pc, #68]	@ (8000948 <TERMINAL_handleCommand+0x90>)
 8000904:	2114      	movs	r1, #20
 8000906:	f000 fc63 	bl	80011d0 <sniprintf>
 800090a:	e005      	b.n	8000918 <TERMINAL_handleCommand+0x60>
        } else {
            // user somehow included it already
            snprintf(formatted, sizeof(formatted), "%s", newNum);
 800090c:	1d38      	adds	r0, r7, #4
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	4a0e      	ldr	r2, [pc, #56]	@ (800094c <TERMINAL_handleCommand+0x94>)
 8000912:	2114      	movs	r1, #20
 8000914:	f000 fc5c 	bl	80011d0 <sniprintf>
        }

        // Copy into the global phone buffer
        strncpy(g_phoneNumber, formatted, PHONE_NUMBER_MAX_LEN - 1);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2213      	movs	r2, #19
 800091c:	4619      	mov	r1, r3
 800091e:	480c      	ldr	r0, [pc, #48]	@ (8000950 <TERMINAL_handleCommand+0x98>)
 8000920:	f000 fde1 	bl	80014e6 <strncpy>
        g_phoneNumber[PHONE_NUMBER_MAX_LEN - 1] = '\0';
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <TERMINAL_handleCommand+0x98>)
 8000926:	2200      	movs	r2, #0
 8000928:	74da      	strb	r2, [r3, #19]

        print("Phone number set to %s\n", g_phoneNumber);
 800092a:	4909      	ldr	r1, [pc, #36]	@ (8000950 <TERMINAL_handleCommand+0x98>)
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <TERMINAL_handleCommand+0x9c>)
 800092e:	f000 f9c1 	bl	8000cb4 <print>
    }
}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000ac 	.word	0x200000ac
 8000940:	08002490 	.word	0x08002490
 8000944:	080024a4 	.word	0x080024a4
 8000948:	080024ac 	.word	0x080024ac
 800094c:	080024b0 	.word	0x080024b0
 8000950:	20000000 	.word	0x20000000
 8000954:	080024b4 	.word	0x080024b4

08000958 <__NVIC_EnableIRQ>:
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	2b00      	cmp	r3, #0
 8000968:	db0b      	blt.n	8000982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	f003 021f 	and.w	r2, r3, #31
 8000970:	4907      	ldr	r1, [pc, #28]	@ (8000990 <__NVIC_EnableIRQ+0x38>)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	095b      	lsrs	r3, r3, #5
 8000978:	2001      	movs	r0, #1
 800097a:	fa00 f202 	lsl.w	r2, r0, r2
 800097e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100

08000994 <TIM2_IRQHandler>:




void TIM2_IRQHandler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
	// Clean the interrupt flag.
    TIM2->SR &= ~0x00000001;
 8000998:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6113      	str	r3, [r2, #16]
	// Raise the software flag.
	Expired = TRUE;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <TIM2_IRQHandler+0x24>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	200000cc 	.word	0x200000cc

080009bc <TIMER2_expired>:




BOOL TIMER2_expired(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	if(Expired)
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <TIMER2_expired+0x24>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d004      	beq.n	80009d2 <TIMER2_expired+0x16>
	{
		Expired = FALSE;
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <TIMER2_expired+0x24>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <TIMER2_expired+0x18>
	}
	else
	{
		return FALSE;
 80009d2:	2300      	movs	r3, #0
	}
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200000cc 	.word	0x200000cc

080009e4 <TIMER2_init>:




void TIMER2_init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
    // Enable Timer 2 clock (p. 152 in the datasheet).
    RCC->APB1ENR |= 0x00000001;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <TIMER2_init+0x34>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000a18 <TIMER2_init+0x34>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	61d3      	str	r3, [r2, #28]
    // Set the frequency of Timer 2.
    // Assuming a clock source of 8 MHz (see pp. 127 and 133 in the datasheet),
    // this will set the timer to tick at a rate of 1 Hz.
    TIM2->ARR = 8000000;
 80009f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009f8:	4a08      	ldr	r2, [pc, #32]	@ (8000a1c <TIMER2_init+0x38>)
 80009fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Enable the Timer 2 interrupt.
    TIM2->DIER = 0x00000001;
 80009fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a00:	2201      	movs	r2, #1
 8000a02:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8000a04:	201c      	movs	r0, #28
 8000a06:	f7ff ffa7 	bl	8000958 <__NVIC_EnableIRQ>
    // Enable Timer 2.
    TIM2->CR1 = 0x00000001;
 8000a0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a0e:	2201      	movs	r2, #1
 8000a10:	601a      	str	r2, [r3, #0]
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	007a1200 	.word	0x007a1200

08000a20 <processSmsLine>:

// true when the next line is the SMS body
static BOOL smsBodyExpected = FALSE;

static void processSmsLine(const char *line)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b090      	sub	sp, #64	@ 0x40
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    // 1) summary notification: +CMTI: "SM",<slot>
    if (strncmp(line, "+CMTI:", 6) == 0)
 8000a28:	2206      	movs	r2, #6
 8000a2a:	4939      	ldr	r1, [pc, #228]	@ (8000b10 <processSmsLine+0xf0>)
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 fd48 	bl	80014c2 <strncmp>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d11e      	bne.n	8000a76 <processSmsLine+0x56>
    {
        char *comma = strchr((char*)line, ',');
 8000a38:	212c      	movs	r1, #44	@ 0x2c
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f000 fd34 	bl	80014a8 <strchr>
 8000a40:	6378      	str	r0, [r7, #52]	@ 0x34
        if (comma) {
 8000a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d05f      	beq.n	8000b08 <processSmsLine+0xe8>
            int slot = atoi(comma + 1);
 8000a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fa16 	bl	8000e7e <atoi>
 8000a52:	6338      	str	r0, [r7, #48]	@ 0x30
            char cmd[16];
            snprintf(cmd, sizeof(cmd), "AT+CMGR=%d\r\n", slot);
 8000a54:	f107 0020 	add.w	r0, r7, #32
 8000a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <processSmsLine+0xf4>)
 8000a5c:	2110      	movs	r1, #16
 8000a5e:	f000 fbb7 	bl	80011d0 <sniprintf>
            USART1_print("%s", cmd);
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4619      	mov	r1, r3
 8000a68:	482b      	ldr	r0, [pc, #172]	@ (8000b18 <processSmsLine+0xf8>)
 8000a6a:	f000 f893 	bl	8000b94 <USART1_print>
            smsBodyExpected = TRUE;
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <processSmsLine+0xfc>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	701a      	strb	r2, [r3, #0]
            g_phoneNumber[PHONE_NUMBER_MAX_LEN - 1] = '\0';
            print("Phone number set via SMS to %s\n", g_phoneNumber);
        }
        smsBodyExpected = FALSE;
    }
}
 8000a74:	e048      	b.n	8000b08 <processSmsLine+0xe8>
    else if (strncmp(line, "+CMT:", 5) == 0)
 8000a76:	2205      	movs	r2, #5
 8000a78:	4929      	ldr	r1, [pc, #164]	@ (8000b20 <processSmsLine+0x100>)
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 fd21 	bl	80014c2 <strncmp>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <processSmsLine+0x6e>
        smsBodyExpected = TRUE;
 8000a86:	4b25      	ldr	r3, [pc, #148]	@ (8000b1c <processSmsLine+0xfc>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
}
 8000a8c:	e03c      	b.n	8000b08 <processSmsLine+0xe8>
    else if (smsBodyExpected)
 8000a8e:	4b23      	ldr	r3, [pc, #140]	@ (8000b1c <processSmsLine+0xfc>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d038      	beq.n	8000b08 <processSmsLine+0xe8>
        const char *prefix = "setnum ";
 8000a96:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <processSmsLine+0x104>)
 8000a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (strncmp(line, prefix, strlen(prefix)) == 0)
 8000a9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000a9c:	f7ff fba0 	bl	80001e0 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 fd0b 	bl	80014c2 <strncmp>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d127      	bne.n	8000b02 <processSmsLine+0xe2>
            const char *digits = line + strlen(prefix);
 8000ab2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ab4:	f7ff fb94 	bl	80001e0 <strlen>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (digits[0] == '+')
 8000ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b2b      	cmp	r3, #43	@ 0x2b
 8000ac6:	d107      	bne.n	8000ad8 <processSmsLine+0xb8>
                snprintf(formatted, sizeof(formatted), "%s", digits);
 8000ac8:	f107 000c 	add.w	r0, r7, #12
 8000acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <processSmsLine+0xf8>)
 8000ad0:	2114      	movs	r1, #20
 8000ad2:	f000 fb7d 	bl	80011d0 <sniprintf>
 8000ad6:	e006      	b.n	8000ae6 <processSmsLine+0xc6>
                snprintf(formatted, sizeof(formatted), "+%s", digits);
 8000ad8:	f107 000c 	add.w	r0, r7, #12
 8000adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <processSmsLine+0x108>)
 8000ae0:	2114      	movs	r1, #20
 8000ae2:	f000 fb75 	bl	80011d0 <sniprintf>
            strncpy(g_phoneNumber, formatted, PHONE_NUMBER_MAX_LEN - 1);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2213      	movs	r2, #19
 8000aec:	4619      	mov	r1, r3
 8000aee:	480f      	ldr	r0, [pc, #60]	@ (8000b2c <processSmsLine+0x10c>)
 8000af0:	f000 fcf9 	bl	80014e6 <strncpy>
            g_phoneNumber[PHONE_NUMBER_MAX_LEN - 1] = '\0';
 8000af4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b2c <processSmsLine+0x10c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	74da      	strb	r2, [r3, #19]
            print("Phone number set via SMS to %s\n", g_phoneNumber);
 8000afa:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <processSmsLine+0x10c>)
 8000afc:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <processSmsLine+0x110>)
 8000afe:	f000 f8d9 	bl	8000cb4 <print>
        smsBodyExpected = FALSE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <processSmsLine+0xfc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	3740      	adds	r7, #64	@ 0x40
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	080024cc 	.word	0x080024cc
 8000b14:	080024d4 	.word	0x080024d4
 8000b18:	080024e4 	.word	0x080024e4
 8000b1c:	20000151 	.word	0x20000151
 8000b20:	080024e8 	.word	0x080024e8
 8000b24:	080024f0 	.word	0x080024f0
 8000b28:	080024f8 	.word	0x080024f8
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	080024fc 	.word	0x080024fc

08000b34 <USART1_init>:

void USART1_init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    // … your existing pin/baud/interrupt setup …

    // put SIM in text‐mode SMS, route new SMS directly or as index
    USART1_print("AT+CMGF=1\r\n");
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <USART1_init+0x14>)
 8000b3a:	f000 f82b 	bl	8000b94 <USART1_print>
    USART1_print("AT+CNMI=2,1,0,0,0\r\n");
 8000b3e:	4803      	ldr	r0, [pc, #12]	@ (8000b4c <USART1_init+0x18>)
 8000b40:	f000 f828 	bl	8000b94 <USART1_print>
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	0800251c 	.word	0x0800251c
 8000b4c:	08002528 	.word	0x08002528

08000b50 <USART1_commandReceived>:

BOOL USART1_commandReceived(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
    if (Command_Received) {
 8000b54:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <USART1_commandReceived+0x24>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <USART1_commandReceived+0x16>
        Command_Received = FALSE;
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <USART1_commandReceived+0x24>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <USART1_commandReceived+0x18>
    }
    return FALSE;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000150 	.word	0x20000150

08000b78 <USART1_getCommand>:

void USART1_getCommand(char *p_command)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
    strcpy(p_command, A_Rx_Buffer);
 8000b80:	4903      	ldr	r1, [pc, #12]	@ (8000b90 <USART1_getCommand+0x18>)
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 fd35 	bl	80015f2 <strcpy>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000d0 	.word	0x200000d0

08000b94 <USART1_print>:

void USART1_print(const char *fmt, ...)
{
 8000b94:	b40f      	push	{r0, r1, r2, r3}
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	607b      	str	r3, [r7, #4]
    int len = vsnprintf(A_Tx_Buffer, sizeof(A_Tx_Buffer), fmt, args);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	2140      	movs	r1, #64	@ 0x40
 8000ba8:	4811      	ldr	r0, [pc, #68]	@ (8000bf0 <USART1_print+0x5c>)
 8000baa:	f000 fbb3 	bl	8001314 <vsniprintf>
 8000bae:	60b8      	str	r0, [r7, #8]
    va_end(args);

    for (int i = 0; i < len; i++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e00f      	b.n	8000bd6 <USART1_print+0x42>
        while (!(USART3->ISR & USART_ISR_TXE));
 8000bb6:	bf00      	nop
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <USART1_print+0x60>)
 8000bba:	69db      	ldr	r3, [r3, #28]
 8000bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0f9      	beq.n	8000bb8 <USART1_print+0x24>
        USART3->TDR = A_Tx_Buffer[i];
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <USART1_print+0x5c>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <USART1_print+0x60>)
 8000bce:	851a      	strh	r2, [r3, #40]	@ 0x28
    for (int i = 0; i < len; i++) {
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dbeb      	blt.n	8000bb6 <USART1_print+0x22>
    }
}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bea:	b004      	add	sp, #16
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000110 	.word	0x20000110
 8000bf4:	40004800 	.word	0x40004800

08000bf8 <USART3_EXTI28_IRQHandler>:

void USART3_EXTI28_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
    if (USART3->ISR & USART_ISR_RXNE)
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <USART3_EXTI28_IRQHandler+0x6c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d028      	beq.n	8000c5c <USART3_EXTI28_IRQHandler+0x64>
    {
        char rx = (char)(USART3->RDR & 0xFF);
 8000c0a:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <USART3_EXTI28_IRQHandler+0x6c>)
 8000c0c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	71fb      	strb	r3, [r7, #7]
        if (rx == '\r') return;    // drop stray CR
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b0d      	cmp	r3, #13
 8000c16:	d020      	beq.n	8000c5a <USART3_EXTI28_IRQHandler+0x62>

        if (rx == '\n') {
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b0a      	cmp	r3, #10
 8000c1c:	d10d      	bne.n	8000c3a <USART3_EXTI28_IRQHandler+0x42>
            *P_Loc_In_Rx_Buffer = '\0';
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <USART3_EXTI28_IRQHandler+0x70>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
            processSmsLine(A_Rx_Buffer);
 8000c26:	4811      	ldr	r0, [pc, #68]	@ (8000c6c <USART3_EXTI28_IRQHandler+0x74>)
 8000c28:	f7ff fefa 	bl	8000a20 <processSmsLine>
            Command_Received = TRUE;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <USART3_EXTI28_IRQHandler+0x78>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
            P_Loc_In_Rx_Buffer = A_Rx_Buffer;
 8000c32:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <USART3_EXTI28_IRQHandler+0x70>)
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <USART3_EXTI28_IRQHandler+0x74>)
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	e010      	b.n	8000c5c <USART3_EXTI28_IRQHandler+0x64>
        } else {
            *P_Loc_In_Rx_Buffer++ = rx;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <USART3_EXTI28_IRQHandler+0x70>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	4909      	ldr	r1, [pc, #36]	@ (8000c68 <USART3_EXTI28_IRQHandler+0x70>)
 8000c42:	600a      	str	r2, [r1, #0]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	701a      	strb	r2, [r3, #0]
            if (P_Loc_In_Rx_Buffer >= P_End_Of_Rx_Buffer)
 8000c48:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <USART3_EXTI28_IRQHandler+0x70>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a09      	ldr	r2, [pc, #36]	@ (8000c74 <USART3_EXTI28_IRQHandler+0x7c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d304      	bcc.n	8000c5c <USART3_EXTI28_IRQHandler+0x64>
                P_Loc_In_Rx_Buffer = P_End_Of_Rx_Buffer;
 8000c52:	4a08      	ldr	r2, [pc, #32]	@ (8000c74 <USART3_EXTI28_IRQHandler+0x7c>)
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <USART3_EXTI28_IRQHandler+0x70>)
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	e000      	b.n	8000c5c <USART3_EXTI28_IRQHandler+0x64>
        if (rx == '\r') return;    // drop stray CR
 8000c5a:	bf00      	nop
        }
    }
}
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004800 	.word	0x40004800
 8000c68:	20000014 	.word	0x20000014
 8000c6c:	200000d0 	.word	0x200000d0
 8000c70:	20000150 	.word	0x20000150
 8000c74:	2000010f 	.word	0x2000010f

08000c78 <__NVIC_EnableIRQ>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	@ (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <print>:




void print(char *p_format, ...)
{
 8000cb4:	b40f      	push	{r0, r1, r2, r3}
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	607b      	str	r3, [r7, #4]
	(void)vsprintf(A_Tx_Buffer, p_format, p_variables);
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6939      	ldr	r1, [r7, #16]
 8000cc6:	4806      	ldr	r0, [pc, #24]	@ (8000ce0 <print+0x2c>)
 8000cc8:	f000 fb48 	bl	800135c <vsiprintf>
    USART2_print(A_Tx_Buffer);
 8000ccc:	4804      	ldr	r0, [pc, #16]	@ (8000ce0 <print+0x2c>)
 8000cce:	f000 f88d 	bl	8000dec <USART2_print>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr
 8000ce0:	200001d4 	.word	0x200001d4

08000ce4 <USART2_commandReceived>:




BOOL USART2_commandReceived(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
    if(Command_Received)
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <USART2_commandReceived+0x24>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d004      	beq.n	8000cfa <USART2_commandReceived+0x16>
    {
    	Command_Received = FALSE;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <USART2_commandReceived+0x24>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
    	return TRUE;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e000      	b.n	8000cfc <USART2_commandReceived+0x18>
    }
    else
    {
    	return FALSE;
 8000cfa:	2300      	movs	r3, #0
    }
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000254 	.word	0x20000254

08000d0c <USART2_getCommand>:




void USART2_getCommand(char *p_command)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	(void)strcpy(p_command, A_Rx_Buffer);
 8000d14:	4903      	ldr	r1, [pc, #12]	@ (8000d24 <USART2_getCommand+0x18>)
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fc6b 	bl	80015f2 <strcpy>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000154 	.word	0x20000154

08000d28 <USART2_init>:




void USART2_init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet).
    RCC->AHBENR |= 0x00020000;
 8000d2c:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <USART2_init+0x54>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <USART2_init+0x54>)
 8000d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d36:	6153      	str	r3, [r2, #20]
    // Enable USART2 clock.
    RCC->APB1ENR |= 0x00020000;
 8000d38:	4b10      	ldr	r3, [pc, #64]	@ (8000d7c <USART2_init+0x54>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d7c <USART2_init+0x54>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d42:	61d3      	str	r3, [r2, #28]
    // Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
    GPIOA->MODER |= 0x000000A0;
 8000d44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d4e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000d52:	6013      	str	r3, [r2, #0]
    // AFR[0] is the same as AFRL in the reference manual (p. 241),
    // and AFR[1] is the same as AFRH in the reference manual (p. 242).
    GPIOA->AFR[0] |= 0x00007700;
 8000d54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d5e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000d62:	6213      	str	r3, [r2, #32]
    USART2->BRR = 833;  // 8 MHz / 9600 baud rate.
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <USART2_init+0x58>)
 8000d66:	f240 3241 	movw	r2, #833	@ 0x341
 8000d6a:	60da      	str	r2, [r3, #12]
    // Enable USART2 and its RX and TX functionality.
    // Also enable the RX interrupt.
    USART2->CR1 = 0x0000002D;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <USART2_init+0x58>)
 8000d6e:	222d      	movs	r2, #45	@ 0x2d
 8000d70:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART2_IRQn);
 8000d72:	2026      	movs	r0, #38	@ 0x26
 8000d74:	f7ff ff80 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40004400 	.word	0x40004400

08000d84 <USART2_EXTI26_IRQHandler>:




void USART2_EXTI26_IRQHandler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
	char rx_byte;

	// Read the received byte into the buffer.
	// This also clears the interrupt request flag.
    rx_byte = USART2->RDR;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <USART2_EXTI26_IRQHandler+0x54>)
 8000d8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	71fb      	strb	r3, [r7, #7]

    // If the user entered '\n', a whole command has been received.
    if(rx_byte == '\n')
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b0a      	cmp	r3, #10
 8000d96:	d10a      	bne.n	8000dae <USART2_EXTI26_IRQHandler+0x2a>
    {
    	Command_Received = TRUE;
 8000d98:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <USART2_EXTI26_IRQHandler+0x58>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
    	*P_Loc_In_Rx_Buffer = '\0';
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <USART2_EXTI26_IRQHandler+0x5c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2200      	movs	r2, #0
 8000da4:	701a      	strb	r2, [r3, #0]
    	P_Loc_In_Rx_Buffer = A_Rx_Buffer;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <USART2_EXTI26_IRQHandler+0x5c>)
 8000da8:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <USART2_EXTI26_IRQHandler+0x60>)
 8000daa:	601a      	str	r2, [r3, #0]
    	return;
 8000dac:	e00f      	b.n	8000dce <USART2_EXTI26_IRQHandler+0x4a>
    }

    *P_Loc_In_Rx_Buffer = rx_byte;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <USART2_EXTI26_IRQHandler+0x5c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	79fa      	ldrb	r2, [r7, #7]
 8000db4:	701a      	strb	r2, [r3, #0]
    // If the buffer is full, we don't advance the pointer.
    if(P_Loc_In_Rx_Buffer >= P_End_Of_Rx_Buffer)
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <USART2_EXTI26_IRQHandler+0x5c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <USART2_EXTI26_IRQHandler+0x64>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d205      	bcs.n	8000dcc <USART2_EXTI26_IRQHandler+0x48>
    {
    	return;
    }
    P_Loc_In_Rx_Buffer++;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <USART2_EXTI26_IRQHandler+0x5c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	4a06      	ldr	r2, [pc, #24]	@ (8000de0 <USART2_EXTI26_IRQHandler+0x5c>)
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e000      	b.n	8000dce <USART2_EXTI26_IRQHandler+0x4a>
    	return;
 8000dcc:	bf00      	nop
}
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	20000254 	.word	0x20000254
 8000de0:	20000018 	.word	0x20000018
 8000de4:	20000154 	.word	0x20000154
 8000de8:	20000253 	.word	0x20000253

08000dec <USART2_print>:




void USART2_print(const char *p_data)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	while(*p_data != '\0')
 8000df4:	e00d      	b.n	8000e12 <USART2_print+0x26>
	{
		USART2->TDR = *p_data;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <USART2_print+0x3c>)
 8000dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_data++;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3301      	adds	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));
 8000e04:	bf00      	nop
 8000e06:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <USART2_print+0x3c>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f9      	beq.n	8000e06 <USART2_print+0x1a>
	while(*p_data != '\0')
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1ed      	bne.n	8000df6 <USART2_print+0xa>
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40004400 	.word	0x40004400

08000e2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e2c:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e30:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5a:	f000 fba3 	bl	80015a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5e:	f7ff fa89 	bl	8000374 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   r0, =_estack
 8000e64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e70:	0800268c 	.word	0x0800268c
  ldr r2, =_sbss
 8000e74:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e78:	200003a8 	.word	0x200003a8

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>

08000e7e <atoi>:
 8000e7e:	220a      	movs	r2, #10
 8000e80:	2100      	movs	r1, #0
 8000e82:	f000 b87b 	b.w	8000f7c <strtol>
	...

08000e88 <_strtol_l.constprop.0>:
 8000e88:	2b24      	cmp	r3, #36	@ 0x24
 8000e8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e8e:	4686      	mov	lr, r0
 8000e90:	4690      	mov	r8, r2
 8000e92:	d801      	bhi.n	8000e98 <_strtol_l.constprop.0+0x10>
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <_strtol_l.constprop.0+0x1e>
 8000e98:	f000 fb7e 	bl	8001598 <__errno>
 8000e9c:	2316      	movs	r3, #22
 8000e9e:	6003      	str	r3, [r0, #0]
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	4834      	ldr	r0, [pc, #208]	@ (8000f78 <_strtol_l.constprop.0+0xf0>)
 8000ea8:	460d      	mov	r5, r1
 8000eaa:	462a      	mov	r2, r5
 8000eac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000eb0:	5d06      	ldrb	r6, [r0, r4]
 8000eb2:	f016 0608 	ands.w	r6, r6, #8
 8000eb6:	d1f8      	bne.n	8000eaa <_strtol_l.constprop.0+0x22>
 8000eb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8000eba:	d12d      	bne.n	8000f18 <_strtol_l.constprop.0+0x90>
 8000ebc:	782c      	ldrb	r4, [r5, #0]
 8000ebe:	2601      	movs	r6, #1
 8000ec0:	1c95      	adds	r5, r2, #2
 8000ec2:	f033 0210 	bics.w	r2, r3, #16
 8000ec6:	d109      	bne.n	8000edc <_strtol_l.constprop.0+0x54>
 8000ec8:	2c30      	cmp	r4, #48	@ 0x30
 8000eca:	d12a      	bne.n	8000f22 <_strtol_l.constprop.0+0x9a>
 8000ecc:	782a      	ldrb	r2, [r5, #0]
 8000ece:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8000ed2:	2a58      	cmp	r2, #88	@ 0x58
 8000ed4:	d125      	bne.n	8000f22 <_strtol_l.constprop.0+0x9a>
 8000ed6:	786c      	ldrb	r4, [r5, #1]
 8000ed8:	2310      	movs	r3, #16
 8000eda:	3502      	adds	r5, #2
 8000edc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000ee0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	fbbc f9f3 	udiv	r9, ip, r3
 8000eea:	4610      	mov	r0, r2
 8000eec:	fb03 ca19 	mls	sl, r3, r9, ip
 8000ef0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000ef4:	2f09      	cmp	r7, #9
 8000ef6:	d81b      	bhi.n	8000f30 <_strtol_l.constprop.0+0xa8>
 8000ef8:	463c      	mov	r4, r7
 8000efa:	42a3      	cmp	r3, r4
 8000efc:	dd27      	ble.n	8000f4e <_strtol_l.constprop.0+0xc6>
 8000efe:	1c57      	adds	r7, r2, #1
 8000f00:	d007      	beq.n	8000f12 <_strtol_l.constprop.0+0x8a>
 8000f02:	4581      	cmp	r9, r0
 8000f04:	d320      	bcc.n	8000f48 <_strtol_l.constprop.0+0xc0>
 8000f06:	d101      	bne.n	8000f0c <_strtol_l.constprop.0+0x84>
 8000f08:	45a2      	cmp	sl, r4
 8000f0a:	db1d      	blt.n	8000f48 <_strtol_l.constprop.0+0xc0>
 8000f0c:	fb00 4003 	mla	r0, r0, r3, r4
 8000f10:	2201      	movs	r2, #1
 8000f12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000f16:	e7eb      	b.n	8000ef0 <_strtol_l.constprop.0+0x68>
 8000f18:	2c2b      	cmp	r4, #43	@ 0x2b
 8000f1a:	bf04      	itt	eq
 8000f1c:	782c      	ldrbeq	r4, [r5, #0]
 8000f1e:	1c95      	addeq	r5, r2, #2
 8000f20:	e7cf      	b.n	8000ec2 <_strtol_l.constprop.0+0x3a>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1da      	bne.n	8000edc <_strtol_l.constprop.0+0x54>
 8000f26:	2c30      	cmp	r4, #48	@ 0x30
 8000f28:	bf0c      	ite	eq
 8000f2a:	2308      	moveq	r3, #8
 8000f2c:	230a      	movne	r3, #10
 8000f2e:	e7d5      	b.n	8000edc <_strtol_l.constprop.0+0x54>
 8000f30:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000f34:	2f19      	cmp	r7, #25
 8000f36:	d801      	bhi.n	8000f3c <_strtol_l.constprop.0+0xb4>
 8000f38:	3c37      	subs	r4, #55	@ 0x37
 8000f3a:	e7de      	b.n	8000efa <_strtol_l.constprop.0+0x72>
 8000f3c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8000f40:	2f19      	cmp	r7, #25
 8000f42:	d804      	bhi.n	8000f4e <_strtol_l.constprop.0+0xc6>
 8000f44:	3c57      	subs	r4, #87	@ 0x57
 8000f46:	e7d8      	b.n	8000efa <_strtol_l.constprop.0+0x72>
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	e7e1      	b.n	8000f12 <_strtol_l.constprop.0+0x8a>
 8000f4e:	1c53      	adds	r3, r2, #1
 8000f50:	d108      	bne.n	8000f64 <_strtol_l.constprop.0+0xdc>
 8000f52:	2322      	movs	r3, #34	@ 0x22
 8000f54:	f8ce 3000 	str.w	r3, [lr]
 8000f58:	4660      	mov	r0, ip
 8000f5a:	f1b8 0f00 	cmp.w	r8, #0
 8000f5e:	d0a0      	beq.n	8000ea2 <_strtol_l.constprop.0+0x1a>
 8000f60:	1e69      	subs	r1, r5, #1
 8000f62:	e006      	b.n	8000f72 <_strtol_l.constprop.0+0xea>
 8000f64:	b106      	cbz	r6, 8000f68 <_strtol_l.constprop.0+0xe0>
 8000f66:	4240      	negs	r0, r0
 8000f68:	f1b8 0f00 	cmp.w	r8, #0
 8000f6c:	d099      	beq.n	8000ea2 <_strtol_l.constprop.0+0x1a>
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d1f6      	bne.n	8000f60 <_strtol_l.constprop.0+0xd8>
 8000f72:	f8c8 1000 	str.w	r1, [r8]
 8000f76:	e794      	b.n	8000ea2 <_strtol_l.constprop.0+0x1a>
 8000f78:	08002546 	.word	0x08002546

08000f7c <strtol>:
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	460a      	mov	r2, r1
 8000f80:	4601      	mov	r1, r0
 8000f82:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <strtol+0x10>)
 8000f84:	6800      	ldr	r0, [r0, #0]
 8000f86:	f7ff bf7f 	b.w	8000e88 <_strtol_l.constprop.0>
 8000f8a:	bf00      	nop
 8000f8c:	20000028 	.word	0x20000028

08000f90 <std>:
 8000f90:	2300      	movs	r3, #0
 8000f92:	b510      	push	{r4, lr}
 8000f94:	4604      	mov	r4, r0
 8000f96:	e9c0 3300 	strd	r3, r3, [r0]
 8000f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000f9e:	6083      	str	r3, [r0, #8]
 8000fa0:	8181      	strh	r1, [r0, #12]
 8000fa2:	6643      	str	r3, [r0, #100]	@ 0x64
 8000fa4:	81c2      	strh	r2, [r0, #14]
 8000fa6:	6183      	str	r3, [r0, #24]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2208      	movs	r2, #8
 8000fac:	305c      	adds	r0, #92	@ 0x5c
 8000fae:	f000 fa73 	bl	8001498 <memset>
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <std+0x58>)
 8000fb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fec <std+0x5c>)
 8000fb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <std+0x60>)
 8000fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff4 <std+0x64>)
 8000fc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <std+0x68>)
 8000fc4:	6224      	str	r4, [r4, #32]
 8000fc6:	429c      	cmp	r4, r3
 8000fc8:	d006      	beq.n	8000fd8 <std+0x48>
 8000fca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000fce:	4294      	cmp	r4, r2
 8000fd0:	d002      	beq.n	8000fd8 <std+0x48>
 8000fd2:	33d0      	adds	r3, #208	@ 0xd0
 8000fd4:	429c      	cmp	r4, r3
 8000fd6:	d105      	bne.n	8000fe4 <std+0x54>
 8000fd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fe0:	f000 bb04 	b.w	80015ec <__retarget_lock_init_recursive>
 8000fe4:	bd10      	pop	{r4, pc}
 8000fe6:	bf00      	nop
 8000fe8:	08001239 	.word	0x08001239
 8000fec:	0800125b 	.word	0x0800125b
 8000ff0:	08001293 	.word	0x08001293
 8000ff4:	080012b7 	.word	0x080012b7
 8000ff8:	20000258 	.word	0x20000258

08000ffc <stdio_exit_handler>:
 8000ffc:	4a02      	ldr	r2, [pc, #8]	@ (8001008 <stdio_exit_handler+0xc>)
 8000ffe:	4903      	ldr	r1, [pc, #12]	@ (800100c <stdio_exit_handler+0x10>)
 8001000:	4803      	ldr	r0, [pc, #12]	@ (8001010 <stdio_exit_handler+0x14>)
 8001002:	f000 b869 	b.w	80010d8 <_fwalk_sglue>
 8001006:	bf00      	nop
 8001008:	2000001c 	.word	0x2000001c
 800100c:	08001ec9 	.word	0x08001ec9
 8001010:	2000002c 	.word	0x2000002c

08001014 <cleanup_stdio>:
 8001014:	6841      	ldr	r1, [r0, #4]
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <cleanup_stdio+0x34>)
 8001018:	4299      	cmp	r1, r3
 800101a:	b510      	push	{r4, lr}
 800101c:	4604      	mov	r4, r0
 800101e:	d001      	beq.n	8001024 <cleanup_stdio+0x10>
 8001020:	f000 ff52 	bl	8001ec8 <_fflush_r>
 8001024:	68a1      	ldr	r1, [r4, #8]
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <cleanup_stdio+0x38>)
 8001028:	4299      	cmp	r1, r3
 800102a:	d002      	beq.n	8001032 <cleanup_stdio+0x1e>
 800102c:	4620      	mov	r0, r4
 800102e:	f000 ff4b 	bl	8001ec8 <_fflush_r>
 8001032:	68e1      	ldr	r1, [r4, #12]
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <cleanup_stdio+0x3c>)
 8001036:	4299      	cmp	r1, r3
 8001038:	d004      	beq.n	8001044 <cleanup_stdio+0x30>
 800103a:	4620      	mov	r0, r4
 800103c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001040:	f000 bf42 	b.w	8001ec8 <_fflush_r>
 8001044:	bd10      	pop	{r4, pc}
 8001046:	bf00      	nop
 8001048:	20000258 	.word	0x20000258
 800104c:	200002c0 	.word	0x200002c0
 8001050:	20000328 	.word	0x20000328

08001054 <global_stdio_init.part.0>:
 8001054:	b510      	push	{r4, lr}
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <global_stdio_init.part.0+0x30>)
 8001058:	4c0b      	ldr	r4, [pc, #44]	@ (8001088 <global_stdio_init.part.0+0x34>)
 800105a:	4a0c      	ldr	r2, [pc, #48]	@ (800108c <global_stdio_init.part.0+0x38>)
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	4620      	mov	r0, r4
 8001060:	2200      	movs	r2, #0
 8001062:	2104      	movs	r1, #4
 8001064:	f7ff ff94 	bl	8000f90 <std>
 8001068:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800106c:	2201      	movs	r2, #1
 800106e:	2109      	movs	r1, #9
 8001070:	f7ff ff8e 	bl	8000f90 <std>
 8001074:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001078:	2202      	movs	r2, #2
 800107a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800107e:	2112      	movs	r1, #18
 8001080:	f7ff bf86 	b.w	8000f90 <std>
 8001084:	20000390 	.word	0x20000390
 8001088:	20000258 	.word	0x20000258
 800108c:	08000ffd 	.word	0x08000ffd

08001090 <__sfp_lock_acquire>:
 8001090:	4801      	ldr	r0, [pc, #4]	@ (8001098 <__sfp_lock_acquire+0x8>)
 8001092:	f000 baac 	b.w	80015ee <__retarget_lock_acquire_recursive>
 8001096:	bf00      	nop
 8001098:	20000399 	.word	0x20000399

0800109c <__sfp_lock_release>:
 800109c:	4801      	ldr	r0, [pc, #4]	@ (80010a4 <__sfp_lock_release+0x8>)
 800109e:	f000 baa7 	b.w	80015f0 <__retarget_lock_release_recursive>
 80010a2:	bf00      	nop
 80010a4:	20000399 	.word	0x20000399

080010a8 <__sinit>:
 80010a8:	b510      	push	{r4, lr}
 80010aa:	4604      	mov	r4, r0
 80010ac:	f7ff fff0 	bl	8001090 <__sfp_lock_acquire>
 80010b0:	6a23      	ldr	r3, [r4, #32]
 80010b2:	b11b      	cbz	r3, 80010bc <__sinit+0x14>
 80010b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010b8:	f7ff bff0 	b.w	800109c <__sfp_lock_release>
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__sinit+0x28>)
 80010be:	6223      	str	r3, [r4, #32]
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__sinit+0x2c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f5      	bne.n	80010b4 <__sinit+0xc>
 80010c8:	f7ff ffc4 	bl	8001054 <global_stdio_init.part.0>
 80010cc:	e7f2      	b.n	80010b4 <__sinit+0xc>
 80010ce:	bf00      	nop
 80010d0:	08001015 	.word	0x08001015
 80010d4:	20000390 	.word	0x20000390

080010d8 <_fwalk_sglue>:
 80010d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010dc:	4607      	mov	r7, r0
 80010de:	4688      	mov	r8, r1
 80010e0:	4614      	mov	r4, r2
 80010e2:	2600      	movs	r6, #0
 80010e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80010e8:	f1b9 0901 	subs.w	r9, r9, #1
 80010ec:	d505      	bpl.n	80010fa <_fwalk_sglue+0x22>
 80010ee:	6824      	ldr	r4, [r4, #0]
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d1f7      	bne.n	80010e4 <_fwalk_sglue+0xc>
 80010f4:	4630      	mov	r0, r6
 80010f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010fa:	89ab      	ldrh	r3, [r5, #12]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d907      	bls.n	8001110 <_fwalk_sglue+0x38>
 8001100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001104:	3301      	adds	r3, #1
 8001106:	d003      	beq.n	8001110 <_fwalk_sglue+0x38>
 8001108:	4629      	mov	r1, r5
 800110a:	4638      	mov	r0, r7
 800110c:	47c0      	blx	r8
 800110e:	4306      	orrs	r6, r0
 8001110:	3568      	adds	r5, #104	@ 0x68
 8001112:	e7e9      	b.n	80010e8 <_fwalk_sglue+0x10>

08001114 <_puts_r>:
 8001114:	6a03      	ldr	r3, [r0, #32]
 8001116:	b570      	push	{r4, r5, r6, lr}
 8001118:	6884      	ldr	r4, [r0, #8]
 800111a:	4605      	mov	r5, r0
 800111c:	460e      	mov	r6, r1
 800111e:	b90b      	cbnz	r3, 8001124 <_puts_r+0x10>
 8001120:	f7ff ffc2 	bl	80010a8 <__sinit>
 8001124:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001126:	07db      	lsls	r3, r3, #31
 8001128:	d405      	bmi.n	8001136 <_puts_r+0x22>
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	0598      	lsls	r0, r3, #22
 800112e:	d402      	bmi.n	8001136 <_puts_r+0x22>
 8001130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001132:	f000 fa5c 	bl	80015ee <__retarget_lock_acquire_recursive>
 8001136:	89a3      	ldrh	r3, [r4, #12]
 8001138:	0719      	lsls	r1, r3, #28
 800113a:	d502      	bpl.n	8001142 <_puts_r+0x2e>
 800113c:	6923      	ldr	r3, [r4, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d135      	bne.n	80011ae <_puts_r+0x9a>
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	f000 f951 	bl	80013ec <__swsetup_r>
 800114a:	b380      	cbz	r0, 80011ae <_puts_r+0x9a>
 800114c:	f04f 35ff 	mov.w	r5, #4294967295
 8001150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001152:	07da      	lsls	r2, r3, #31
 8001154:	d405      	bmi.n	8001162 <_puts_r+0x4e>
 8001156:	89a3      	ldrh	r3, [r4, #12]
 8001158:	059b      	lsls	r3, r3, #22
 800115a:	d402      	bmi.n	8001162 <_puts_r+0x4e>
 800115c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800115e:	f000 fa47 	bl	80015f0 <__retarget_lock_release_recursive>
 8001162:	4628      	mov	r0, r5
 8001164:	bd70      	pop	{r4, r5, r6, pc}
 8001166:	2b00      	cmp	r3, #0
 8001168:	da04      	bge.n	8001174 <_puts_r+0x60>
 800116a:	69a2      	ldr	r2, [r4, #24]
 800116c:	429a      	cmp	r2, r3
 800116e:	dc17      	bgt.n	80011a0 <_puts_r+0x8c>
 8001170:	290a      	cmp	r1, #10
 8001172:	d015      	beq.n	80011a0 <_puts_r+0x8c>
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	6022      	str	r2, [r4, #0]
 800117a:	7019      	strb	r1, [r3, #0]
 800117c:	68a3      	ldr	r3, [r4, #8]
 800117e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001182:	3b01      	subs	r3, #1
 8001184:	60a3      	str	r3, [r4, #8]
 8001186:	2900      	cmp	r1, #0
 8001188:	d1ed      	bne.n	8001166 <_puts_r+0x52>
 800118a:	2b00      	cmp	r3, #0
 800118c:	da11      	bge.n	80011b2 <_puts_r+0x9e>
 800118e:	4622      	mov	r2, r4
 8001190:	210a      	movs	r1, #10
 8001192:	4628      	mov	r0, r5
 8001194:	f000 f8ec 	bl	8001370 <__swbuf_r>
 8001198:	3001      	adds	r0, #1
 800119a:	d0d7      	beq.n	800114c <_puts_r+0x38>
 800119c:	250a      	movs	r5, #10
 800119e:	e7d7      	b.n	8001150 <_puts_r+0x3c>
 80011a0:	4622      	mov	r2, r4
 80011a2:	4628      	mov	r0, r5
 80011a4:	f000 f8e4 	bl	8001370 <__swbuf_r>
 80011a8:	3001      	adds	r0, #1
 80011aa:	d1e7      	bne.n	800117c <_puts_r+0x68>
 80011ac:	e7ce      	b.n	800114c <_puts_r+0x38>
 80011ae:	3e01      	subs	r6, #1
 80011b0:	e7e4      	b.n	800117c <_puts_r+0x68>
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	6022      	str	r2, [r4, #0]
 80011b8:	220a      	movs	r2, #10
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	e7ee      	b.n	800119c <_puts_r+0x88>
	...

080011c0 <puts>:
 80011c0:	4b02      	ldr	r3, [pc, #8]	@ (80011cc <puts+0xc>)
 80011c2:	4601      	mov	r1, r0
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f7ff bfa5 	b.w	8001114 <_puts_r>
 80011ca:	bf00      	nop
 80011cc:	20000028 	.word	0x20000028

080011d0 <sniprintf>:
 80011d0:	b40c      	push	{r2, r3}
 80011d2:	b530      	push	{r4, r5, lr}
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <sniprintf+0x64>)
 80011d6:	1e0c      	subs	r4, r1, #0
 80011d8:	681d      	ldr	r5, [r3, #0]
 80011da:	b09d      	sub	sp, #116	@ 0x74
 80011dc:	da08      	bge.n	80011f0 <sniprintf+0x20>
 80011de:	238b      	movs	r3, #139	@ 0x8b
 80011e0:	602b      	str	r3, [r5, #0]
 80011e2:	f04f 30ff 	mov.w	r0, #4294967295
 80011e6:	b01d      	add	sp, #116	@ 0x74
 80011e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80011ec:	b002      	add	sp, #8
 80011ee:	4770      	bx	lr
 80011f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80011f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80011f8:	bf14      	ite	ne
 80011fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80011fe:	4623      	moveq	r3, r4
 8001200:	9304      	str	r3, [sp, #16]
 8001202:	9307      	str	r3, [sp, #28]
 8001204:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001208:	9002      	str	r0, [sp, #8]
 800120a:	9006      	str	r0, [sp, #24]
 800120c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001210:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001212:	ab21      	add	r3, sp, #132	@ 0x84
 8001214:	a902      	add	r1, sp, #8
 8001216:	4628      	mov	r0, r5
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f000 fb47 	bl	80018ac <_svfiprintf_r>
 800121e:	1c43      	adds	r3, r0, #1
 8001220:	bfbc      	itt	lt
 8001222:	238b      	movlt	r3, #139	@ 0x8b
 8001224:	602b      	strlt	r3, [r5, #0]
 8001226:	2c00      	cmp	r4, #0
 8001228:	d0dd      	beq.n	80011e6 <sniprintf+0x16>
 800122a:	9b02      	ldr	r3, [sp, #8]
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	e7d9      	b.n	80011e6 <sniprintf+0x16>
 8001232:	bf00      	nop
 8001234:	20000028 	.word	0x20000028

08001238 <__sread>:
 8001238:	b510      	push	{r4, lr}
 800123a:	460c      	mov	r4, r1
 800123c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001240:	f000 f986 	bl	8001550 <_read_r>
 8001244:	2800      	cmp	r0, #0
 8001246:	bfab      	itete	ge
 8001248:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800124a:	89a3      	ldrhlt	r3, [r4, #12]
 800124c:	181b      	addge	r3, r3, r0
 800124e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001252:	bfac      	ite	ge
 8001254:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001256:	81a3      	strhlt	r3, [r4, #12]
 8001258:	bd10      	pop	{r4, pc}

0800125a <__swrite>:
 800125a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800125e:	461f      	mov	r7, r3
 8001260:	898b      	ldrh	r3, [r1, #12]
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	4605      	mov	r5, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4616      	mov	r6, r2
 800126a:	d505      	bpl.n	8001278 <__swrite+0x1e>
 800126c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001270:	2302      	movs	r3, #2
 8001272:	2200      	movs	r2, #0
 8001274:	f000 f95a 	bl	800152c <_lseek_r>
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800127e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001282:	81a3      	strh	r3, [r4, #12]
 8001284:	4632      	mov	r2, r6
 8001286:	463b      	mov	r3, r7
 8001288:	4628      	mov	r0, r5
 800128a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800128e:	f000 b971 	b.w	8001574 <_write_r>

08001292 <__sseek>:
 8001292:	b510      	push	{r4, lr}
 8001294:	460c      	mov	r4, r1
 8001296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800129a:	f000 f947 	bl	800152c <_lseek_r>
 800129e:	1c43      	adds	r3, r0, #1
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	bf15      	itete	ne
 80012a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80012a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80012aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80012ae:	81a3      	strheq	r3, [r4, #12]
 80012b0:	bf18      	it	ne
 80012b2:	81a3      	strhne	r3, [r4, #12]
 80012b4:	bd10      	pop	{r4, pc}

080012b6 <__sclose>:
 80012b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ba:	f000 b927 	b.w	800150c <_close_r>

080012be <_vsniprintf_r>:
 80012be:	b530      	push	{r4, r5, lr}
 80012c0:	4614      	mov	r4, r2
 80012c2:	2c00      	cmp	r4, #0
 80012c4:	b09b      	sub	sp, #108	@ 0x6c
 80012c6:	4605      	mov	r5, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	da05      	bge.n	80012d8 <_vsniprintf_r+0x1a>
 80012cc:	238b      	movs	r3, #139	@ 0x8b
 80012ce:	6003      	str	r3, [r0, #0]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	b01b      	add	sp, #108	@ 0x6c
 80012d6:	bd30      	pop	{r4, r5, pc}
 80012d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80012dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80012e0:	bf14      	ite	ne
 80012e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80012e6:	4623      	moveq	r3, r4
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	9305      	str	r3, [sp, #20]
 80012ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012f0:	9100      	str	r1, [sp, #0]
 80012f2:	9104      	str	r1, [sp, #16]
 80012f4:	f8ad 300e 	strh.w	r3, [sp, #14]
 80012f8:	4669      	mov	r1, sp
 80012fa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80012fc:	f000 fad6 	bl	80018ac <_svfiprintf_r>
 8001300:	1c43      	adds	r3, r0, #1
 8001302:	bfbc      	itt	lt
 8001304:	238b      	movlt	r3, #139	@ 0x8b
 8001306:	602b      	strlt	r3, [r5, #0]
 8001308:	2c00      	cmp	r4, #0
 800130a:	d0e3      	beq.n	80012d4 <_vsniprintf_r+0x16>
 800130c:	9b00      	ldr	r3, [sp, #0]
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e7df      	b.n	80012d4 <_vsniprintf_r+0x16>

08001314 <vsniprintf>:
 8001314:	b507      	push	{r0, r1, r2, lr}
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	460a      	mov	r2, r1
 800131c:	4601      	mov	r1, r0
 800131e:	4803      	ldr	r0, [pc, #12]	@ (800132c <vsniprintf+0x18>)
 8001320:	6800      	ldr	r0, [r0, #0]
 8001322:	f7ff ffcc 	bl	80012be <_vsniprintf_r>
 8001326:	b003      	add	sp, #12
 8001328:	f85d fb04 	ldr.w	pc, [sp], #4
 800132c:	20000028 	.word	0x20000028

08001330 <_vsiprintf_r>:
 8001330:	b500      	push	{lr}
 8001332:	b09b      	sub	sp, #108	@ 0x6c
 8001334:	9100      	str	r1, [sp, #0]
 8001336:	9104      	str	r1, [sp, #16]
 8001338:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800133c:	9105      	str	r1, [sp, #20]
 800133e:	9102      	str	r1, [sp, #8]
 8001340:	4905      	ldr	r1, [pc, #20]	@ (8001358 <_vsiprintf_r+0x28>)
 8001342:	9103      	str	r1, [sp, #12]
 8001344:	4669      	mov	r1, sp
 8001346:	f000 fab1 	bl	80018ac <_svfiprintf_r>
 800134a:	9b00      	ldr	r3, [sp, #0]
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	b01b      	add	sp, #108	@ 0x6c
 8001352:	f85d fb04 	ldr.w	pc, [sp], #4
 8001356:	bf00      	nop
 8001358:	ffff0208 	.word	0xffff0208

0800135c <vsiprintf>:
 800135c:	4613      	mov	r3, r2
 800135e:	460a      	mov	r2, r1
 8001360:	4601      	mov	r1, r0
 8001362:	4802      	ldr	r0, [pc, #8]	@ (800136c <vsiprintf+0x10>)
 8001364:	6800      	ldr	r0, [r0, #0]
 8001366:	f7ff bfe3 	b.w	8001330 <_vsiprintf_r>
 800136a:	bf00      	nop
 800136c:	20000028 	.word	0x20000028

08001370 <__swbuf_r>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	460e      	mov	r6, r1
 8001374:	4614      	mov	r4, r2
 8001376:	4605      	mov	r5, r0
 8001378:	b118      	cbz	r0, 8001382 <__swbuf_r+0x12>
 800137a:	6a03      	ldr	r3, [r0, #32]
 800137c:	b90b      	cbnz	r3, 8001382 <__swbuf_r+0x12>
 800137e:	f7ff fe93 	bl	80010a8 <__sinit>
 8001382:	69a3      	ldr	r3, [r4, #24]
 8001384:	60a3      	str	r3, [r4, #8]
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	071a      	lsls	r2, r3, #28
 800138a:	d501      	bpl.n	8001390 <__swbuf_r+0x20>
 800138c:	6923      	ldr	r3, [r4, #16]
 800138e:	b943      	cbnz	r3, 80013a2 <__swbuf_r+0x32>
 8001390:	4621      	mov	r1, r4
 8001392:	4628      	mov	r0, r5
 8001394:	f000 f82a 	bl	80013ec <__swsetup_r>
 8001398:	b118      	cbz	r0, 80013a2 <__swbuf_r+0x32>
 800139a:	f04f 37ff 	mov.w	r7, #4294967295
 800139e:	4638      	mov	r0, r7
 80013a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	6922      	ldr	r2, [r4, #16]
 80013a6:	1a98      	subs	r0, r3, r2
 80013a8:	6963      	ldr	r3, [r4, #20]
 80013aa:	b2f6      	uxtb	r6, r6
 80013ac:	4283      	cmp	r3, r0
 80013ae:	4637      	mov	r7, r6
 80013b0:	dc05      	bgt.n	80013be <__swbuf_r+0x4e>
 80013b2:	4621      	mov	r1, r4
 80013b4:	4628      	mov	r0, r5
 80013b6:	f000 fd87 	bl	8001ec8 <_fflush_r>
 80013ba:	2800      	cmp	r0, #0
 80013bc:	d1ed      	bne.n	800139a <__swbuf_r+0x2a>
 80013be:	68a3      	ldr	r3, [r4, #8]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	60a3      	str	r3, [r4, #8]
 80013c4:	6823      	ldr	r3, [r4, #0]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	6022      	str	r2, [r4, #0]
 80013ca:	701e      	strb	r6, [r3, #0]
 80013cc:	6962      	ldr	r2, [r4, #20]
 80013ce:	1c43      	adds	r3, r0, #1
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d004      	beq.n	80013de <__swbuf_r+0x6e>
 80013d4:	89a3      	ldrh	r3, [r4, #12]
 80013d6:	07db      	lsls	r3, r3, #31
 80013d8:	d5e1      	bpl.n	800139e <__swbuf_r+0x2e>
 80013da:	2e0a      	cmp	r6, #10
 80013dc:	d1df      	bne.n	800139e <__swbuf_r+0x2e>
 80013de:	4621      	mov	r1, r4
 80013e0:	4628      	mov	r0, r5
 80013e2:	f000 fd71 	bl	8001ec8 <_fflush_r>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d0d9      	beq.n	800139e <__swbuf_r+0x2e>
 80013ea:	e7d6      	b.n	800139a <__swbuf_r+0x2a>

080013ec <__swsetup_r>:
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	4b29      	ldr	r3, [pc, #164]	@ (8001494 <__swsetup_r+0xa8>)
 80013f0:	4605      	mov	r5, r0
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	460c      	mov	r4, r1
 80013f6:	b118      	cbz	r0, 8001400 <__swsetup_r+0x14>
 80013f8:	6a03      	ldr	r3, [r0, #32]
 80013fa:	b90b      	cbnz	r3, 8001400 <__swsetup_r+0x14>
 80013fc:	f7ff fe54 	bl	80010a8 <__sinit>
 8001400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001404:	0719      	lsls	r1, r3, #28
 8001406:	d422      	bmi.n	800144e <__swsetup_r+0x62>
 8001408:	06da      	lsls	r2, r3, #27
 800140a:	d407      	bmi.n	800141c <__swsetup_r+0x30>
 800140c:	2209      	movs	r2, #9
 800140e:	602a      	str	r2, [r5, #0]
 8001410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001414:	81a3      	strh	r3, [r4, #12]
 8001416:	f04f 30ff 	mov.w	r0, #4294967295
 800141a:	e033      	b.n	8001484 <__swsetup_r+0x98>
 800141c:	0758      	lsls	r0, r3, #29
 800141e:	d512      	bpl.n	8001446 <__swsetup_r+0x5a>
 8001420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001422:	b141      	cbz	r1, 8001436 <__swsetup_r+0x4a>
 8001424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001428:	4299      	cmp	r1, r3
 800142a:	d002      	beq.n	8001432 <__swsetup_r+0x46>
 800142c:	4628      	mov	r0, r5
 800142e:	f000 f8e9 	bl	8001604 <_free_r>
 8001432:	2300      	movs	r3, #0
 8001434:	6363      	str	r3, [r4, #52]	@ 0x34
 8001436:	89a3      	ldrh	r3, [r4, #12]
 8001438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800143c:	81a3      	strh	r3, [r4, #12]
 800143e:	2300      	movs	r3, #0
 8001440:	6063      	str	r3, [r4, #4]
 8001442:	6923      	ldr	r3, [r4, #16]
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	81a3      	strh	r3, [r4, #12]
 800144e:	6923      	ldr	r3, [r4, #16]
 8001450:	b94b      	cbnz	r3, 8001466 <__swsetup_r+0x7a>
 8001452:	89a3      	ldrh	r3, [r4, #12]
 8001454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800145c:	d003      	beq.n	8001466 <__swsetup_r+0x7a>
 800145e:	4621      	mov	r1, r4
 8001460:	4628      	mov	r0, r5
 8001462:	f000 fd7f 	bl	8001f64 <__smakebuf_r>
 8001466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800146a:	f013 0201 	ands.w	r2, r3, #1
 800146e:	d00a      	beq.n	8001486 <__swsetup_r+0x9a>
 8001470:	2200      	movs	r2, #0
 8001472:	60a2      	str	r2, [r4, #8]
 8001474:	6962      	ldr	r2, [r4, #20]
 8001476:	4252      	negs	r2, r2
 8001478:	61a2      	str	r2, [r4, #24]
 800147a:	6922      	ldr	r2, [r4, #16]
 800147c:	b942      	cbnz	r2, 8001490 <__swsetup_r+0xa4>
 800147e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001482:	d1c5      	bne.n	8001410 <__swsetup_r+0x24>
 8001484:	bd38      	pop	{r3, r4, r5, pc}
 8001486:	0799      	lsls	r1, r3, #30
 8001488:	bf58      	it	pl
 800148a:	6962      	ldrpl	r2, [r4, #20]
 800148c:	60a2      	str	r2, [r4, #8]
 800148e:	e7f4      	b.n	800147a <__swsetup_r+0x8e>
 8001490:	2000      	movs	r0, #0
 8001492:	e7f7      	b.n	8001484 <__swsetup_r+0x98>
 8001494:	20000028 	.word	0x20000028

08001498 <memset>:
 8001498:	4402      	add	r2, r0
 800149a:	4603      	mov	r3, r0
 800149c:	4293      	cmp	r3, r2
 800149e:	d100      	bne.n	80014a2 <memset+0xa>
 80014a0:	4770      	bx	lr
 80014a2:	f803 1b01 	strb.w	r1, [r3], #1
 80014a6:	e7f9      	b.n	800149c <memset+0x4>

080014a8 <strchr>:
 80014a8:	b2c9      	uxtb	r1, r1
 80014aa:	4603      	mov	r3, r0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014b2:	b112      	cbz	r2, 80014ba <strchr+0x12>
 80014b4:	428a      	cmp	r2, r1
 80014b6:	d1f9      	bne.n	80014ac <strchr+0x4>
 80014b8:	4770      	bx	lr
 80014ba:	2900      	cmp	r1, #0
 80014bc:	bf18      	it	ne
 80014be:	2000      	movne	r0, #0
 80014c0:	4770      	bx	lr

080014c2 <strncmp>:
 80014c2:	b510      	push	{r4, lr}
 80014c4:	b16a      	cbz	r2, 80014e2 <strncmp+0x20>
 80014c6:	3901      	subs	r1, #1
 80014c8:	1884      	adds	r4, r0, r2
 80014ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d103      	bne.n	80014de <strncmp+0x1c>
 80014d6:	42a0      	cmp	r0, r4
 80014d8:	d001      	beq.n	80014de <strncmp+0x1c>
 80014da:	2a00      	cmp	r2, #0
 80014dc:	d1f5      	bne.n	80014ca <strncmp+0x8>
 80014de:	1ad0      	subs	r0, r2, r3
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	4610      	mov	r0, r2
 80014e4:	e7fc      	b.n	80014e0 <strncmp+0x1e>

080014e6 <strncpy>:
 80014e6:	b510      	push	{r4, lr}
 80014e8:	3901      	subs	r1, #1
 80014ea:	4603      	mov	r3, r0
 80014ec:	b132      	cbz	r2, 80014fc <strncpy+0x16>
 80014ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80014f2:	f803 4b01 	strb.w	r4, [r3], #1
 80014f6:	3a01      	subs	r2, #1
 80014f8:	2c00      	cmp	r4, #0
 80014fa:	d1f7      	bne.n	80014ec <strncpy+0x6>
 80014fc:	441a      	add	r2, r3
 80014fe:	2100      	movs	r1, #0
 8001500:	4293      	cmp	r3, r2
 8001502:	d100      	bne.n	8001506 <strncpy+0x20>
 8001504:	bd10      	pop	{r4, pc}
 8001506:	f803 1b01 	strb.w	r1, [r3], #1
 800150a:	e7f9      	b.n	8001500 <strncpy+0x1a>

0800150c <_close_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d06      	ldr	r5, [pc, #24]	@ (8001528 <_close_r+0x1c>)
 8001510:	2300      	movs	r3, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	602b      	str	r3, [r5, #0]
 8001518:	f000 fdf0 	bl	80020fc <_close>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_close_r+0x1a>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_close_r+0x1a>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	20000394 	.word	0x20000394

0800152c <_lseek_r>:
 800152c:	b538      	push	{r3, r4, r5, lr}
 800152e:	4d07      	ldr	r5, [pc, #28]	@ (800154c <_lseek_r+0x20>)
 8001530:	4604      	mov	r4, r0
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	2200      	movs	r2, #0
 8001538:	602a      	str	r2, [r5, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	f000 fdf6 	bl	800212c <_lseek>
 8001540:	1c43      	adds	r3, r0, #1
 8001542:	d102      	bne.n	800154a <_lseek_r+0x1e>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	b103      	cbz	r3, 800154a <_lseek_r+0x1e>
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	bd38      	pop	{r3, r4, r5, pc}
 800154c:	20000394 	.word	0x20000394

08001550 <_read_r>:
 8001550:	b538      	push	{r3, r4, r5, lr}
 8001552:	4d07      	ldr	r5, [pc, #28]	@ (8001570 <_read_r+0x20>)
 8001554:	4604      	mov	r4, r0
 8001556:	4608      	mov	r0, r1
 8001558:	4611      	mov	r1, r2
 800155a:	2200      	movs	r2, #0
 800155c:	602a      	str	r2, [r5, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	f000 fdec 	bl	800213c <_read>
 8001564:	1c43      	adds	r3, r0, #1
 8001566:	d102      	bne.n	800156e <_read_r+0x1e>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	b103      	cbz	r3, 800156e <_read_r+0x1e>
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	bd38      	pop	{r3, r4, r5, pc}
 8001570:	20000394 	.word	0x20000394

08001574 <_write_r>:
 8001574:	b538      	push	{r3, r4, r5, lr}
 8001576:	4d07      	ldr	r5, [pc, #28]	@ (8001594 <_write_r+0x20>)
 8001578:	4604      	mov	r4, r0
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	2200      	movs	r2, #0
 8001580:	602a      	str	r2, [r5, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	f000 fdf0 	bl	8002168 <_write>
 8001588:	1c43      	adds	r3, r0, #1
 800158a:	d102      	bne.n	8001592 <_write_r+0x1e>
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	b103      	cbz	r3, 8001592 <_write_r+0x1e>
 8001590:	6023      	str	r3, [r4, #0]
 8001592:	bd38      	pop	{r3, r4, r5, pc}
 8001594:	20000394 	.word	0x20000394

08001598 <__errno>:
 8001598:	4b01      	ldr	r3, [pc, #4]	@ (80015a0 <__errno+0x8>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000028 	.word	0x20000028

080015a4 <__libc_init_array>:
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	4d0d      	ldr	r5, [pc, #52]	@ (80015dc <__libc_init_array+0x38>)
 80015a8:	4c0d      	ldr	r4, [pc, #52]	@ (80015e0 <__libc_init_array+0x3c>)
 80015aa:	1b64      	subs	r4, r4, r5
 80015ac:	10a4      	asrs	r4, r4, #2
 80015ae:	2600      	movs	r6, #0
 80015b0:	42a6      	cmp	r6, r4
 80015b2:	d109      	bne.n	80015c8 <__libc_init_array+0x24>
 80015b4:	4d0b      	ldr	r5, [pc, #44]	@ (80015e4 <__libc_init_array+0x40>)
 80015b6:	4c0c      	ldr	r4, [pc, #48]	@ (80015e8 <__libc_init_array+0x44>)
 80015b8:	f000 fdde 	bl	8002178 <_init>
 80015bc:	1b64      	subs	r4, r4, r5
 80015be:	10a4      	asrs	r4, r4, #2
 80015c0:	2600      	movs	r6, #0
 80015c2:	42a6      	cmp	r6, r4
 80015c4:	d105      	bne.n	80015d2 <__libc_init_array+0x2e>
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
 80015c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80015cc:	4798      	blx	r3
 80015ce:	3601      	adds	r6, #1
 80015d0:	e7ee      	b.n	80015b0 <__libc_init_array+0xc>
 80015d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80015d6:	4798      	blx	r3
 80015d8:	3601      	adds	r6, #1
 80015da:	e7f2      	b.n	80015c2 <__libc_init_array+0x1e>
 80015dc:	08002684 	.word	0x08002684
 80015e0:	08002684 	.word	0x08002684
 80015e4:	08002684 	.word	0x08002684
 80015e8:	08002688 	.word	0x08002688

080015ec <__retarget_lock_init_recursive>:
 80015ec:	4770      	bx	lr

080015ee <__retarget_lock_acquire_recursive>:
 80015ee:	4770      	bx	lr

080015f0 <__retarget_lock_release_recursive>:
 80015f0:	4770      	bx	lr

080015f2 <strcpy>:
 80015f2:	4603      	mov	r3, r0
 80015f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80015f8:	f803 2b01 	strb.w	r2, [r3], #1
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	d1f9      	bne.n	80015f4 <strcpy+0x2>
 8001600:	4770      	bx	lr
	...

08001604 <_free_r>:
 8001604:	b538      	push	{r3, r4, r5, lr}
 8001606:	4605      	mov	r5, r0
 8001608:	2900      	cmp	r1, #0
 800160a:	d041      	beq.n	8001690 <_free_r+0x8c>
 800160c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001610:	1f0c      	subs	r4, r1, #4
 8001612:	2b00      	cmp	r3, #0
 8001614:	bfb8      	it	lt
 8001616:	18e4      	addlt	r4, r4, r3
 8001618:	f000 f8e0 	bl	80017dc <__malloc_lock>
 800161c:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <_free_r+0x90>)
 800161e:	6813      	ldr	r3, [r2, #0]
 8001620:	b933      	cbnz	r3, 8001630 <_free_r+0x2c>
 8001622:	6063      	str	r3, [r4, #4]
 8001624:	6014      	str	r4, [r2, #0]
 8001626:	4628      	mov	r0, r5
 8001628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800162c:	f000 b8dc 	b.w	80017e8 <__malloc_unlock>
 8001630:	42a3      	cmp	r3, r4
 8001632:	d908      	bls.n	8001646 <_free_r+0x42>
 8001634:	6820      	ldr	r0, [r4, #0]
 8001636:	1821      	adds	r1, r4, r0
 8001638:	428b      	cmp	r3, r1
 800163a:	bf01      	itttt	eq
 800163c:	6819      	ldreq	r1, [r3, #0]
 800163e:	685b      	ldreq	r3, [r3, #4]
 8001640:	1809      	addeq	r1, r1, r0
 8001642:	6021      	streq	r1, [r4, #0]
 8001644:	e7ed      	b.n	8001622 <_free_r+0x1e>
 8001646:	461a      	mov	r2, r3
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	b10b      	cbz	r3, 8001650 <_free_r+0x4c>
 800164c:	42a3      	cmp	r3, r4
 800164e:	d9fa      	bls.n	8001646 <_free_r+0x42>
 8001650:	6811      	ldr	r1, [r2, #0]
 8001652:	1850      	adds	r0, r2, r1
 8001654:	42a0      	cmp	r0, r4
 8001656:	d10b      	bne.n	8001670 <_free_r+0x6c>
 8001658:	6820      	ldr	r0, [r4, #0]
 800165a:	4401      	add	r1, r0
 800165c:	1850      	adds	r0, r2, r1
 800165e:	4283      	cmp	r3, r0
 8001660:	6011      	str	r1, [r2, #0]
 8001662:	d1e0      	bne.n	8001626 <_free_r+0x22>
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	6053      	str	r3, [r2, #4]
 800166a:	4408      	add	r0, r1
 800166c:	6010      	str	r0, [r2, #0]
 800166e:	e7da      	b.n	8001626 <_free_r+0x22>
 8001670:	d902      	bls.n	8001678 <_free_r+0x74>
 8001672:	230c      	movs	r3, #12
 8001674:	602b      	str	r3, [r5, #0]
 8001676:	e7d6      	b.n	8001626 <_free_r+0x22>
 8001678:	6820      	ldr	r0, [r4, #0]
 800167a:	1821      	adds	r1, r4, r0
 800167c:	428b      	cmp	r3, r1
 800167e:	bf04      	itt	eq
 8001680:	6819      	ldreq	r1, [r3, #0]
 8001682:	685b      	ldreq	r3, [r3, #4]
 8001684:	6063      	str	r3, [r4, #4]
 8001686:	bf04      	itt	eq
 8001688:	1809      	addeq	r1, r1, r0
 800168a:	6021      	streq	r1, [r4, #0]
 800168c:	6054      	str	r4, [r2, #4]
 800168e:	e7ca      	b.n	8001626 <_free_r+0x22>
 8001690:	bd38      	pop	{r3, r4, r5, pc}
 8001692:	bf00      	nop
 8001694:	200003a0 	.word	0x200003a0

08001698 <sbrk_aligned>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4e0f      	ldr	r6, [pc, #60]	@ (80016d8 <sbrk_aligned+0x40>)
 800169c:	460c      	mov	r4, r1
 800169e:	6831      	ldr	r1, [r6, #0]
 80016a0:	4605      	mov	r5, r0
 80016a2:	b911      	cbnz	r1, 80016aa <sbrk_aligned+0x12>
 80016a4:	f000 fcd6 	bl	8002054 <_sbrk_r>
 80016a8:	6030      	str	r0, [r6, #0]
 80016aa:	4621      	mov	r1, r4
 80016ac:	4628      	mov	r0, r5
 80016ae:	f000 fcd1 	bl	8002054 <_sbrk_r>
 80016b2:	1c43      	adds	r3, r0, #1
 80016b4:	d103      	bne.n	80016be <sbrk_aligned+0x26>
 80016b6:	f04f 34ff 	mov.w	r4, #4294967295
 80016ba:	4620      	mov	r0, r4
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
 80016be:	1cc4      	adds	r4, r0, #3
 80016c0:	f024 0403 	bic.w	r4, r4, #3
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	d0f8      	beq.n	80016ba <sbrk_aligned+0x22>
 80016c8:	1a21      	subs	r1, r4, r0
 80016ca:	4628      	mov	r0, r5
 80016cc:	f000 fcc2 	bl	8002054 <_sbrk_r>
 80016d0:	3001      	adds	r0, #1
 80016d2:	d1f2      	bne.n	80016ba <sbrk_aligned+0x22>
 80016d4:	e7ef      	b.n	80016b6 <sbrk_aligned+0x1e>
 80016d6:	bf00      	nop
 80016d8:	2000039c 	.word	0x2000039c

080016dc <_malloc_r>:
 80016dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e0:	1ccd      	adds	r5, r1, #3
 80016e2:	f025 0503 	bic.w	r5, r5, #3
 80016e6:	3508      	adds	r5, #8
 80016e8:	2d0c      	cmp	r5, #12
 80016ea:	bf38      	it	cc
 80016ec:	250c      	movcc	r5, #12
 80016ee:	2d00      	cmp	r5, #0
 80016f0:	4606      	mov	r6, r0
 80016f2:	db01      	blt.n	80016f8 <_malloc_r+0x1c>
 80016f4:	42a9      	cmp	r1, r5
 80016f6:	d904      	bls.n	8001702 <_malloc_r+0x26>
 80016f8:	230c      	movs	r3, #12
 80016fa:	6033      	str	r3, [r6, #0]
 80016fc:	2000      	movs	r0, #0
 80016fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017d8 <_malloc_r+0xfc>
 8001706:	f000 f869 	bl	80017dc <__malloc_lock>
 800170a:	f8d8 3000 	ldr.w	r3, [r8]
 800170e:	461c      	mov	r4, r3
 8001710:	bb44      	cbnz	r4, 8001764 <_malloc_r+0x88>
 8001712:	4629      	mov	r1, r5
 8001714:	4630      	mov	r0, r6
 8001716:	f7ff ffbf 	bl	8001698 <sbrk_aligned>
 800171a:	1c43      	adds	r3, r0, #1
 800171c:	4604      	mov	r4, r0
 800171e:	d158      	bne.n	80017d2 <_malloc_r+0xf6>
 8001720:	f8d8 4000 	ldr.w	r4, [r8]
 8001724:	4627      	mov	r7, r4
 8001726:	2f00      	cmp	r7, #0
 8001728:	d143      	bne.n	80017b2 <_malloc_r+0xd6>
 800172a:	2c00      	cmp	r4, #0
 800172c:	d04b      	beq.n	80017c6 <_malloc_r+0xea>
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	4639      	mov	r1, r7
 8001732:	4630      	mov	r0, r6
 8001734:	eb04 0903 	add.w	r9, r4, r3
 8001738:	f000 fc8c 	bl	8002054 <_sbrk_r>
 800173c:	4581      	cmp	r9, r0
 800173e:	d142      	bne.n	80017c6 <_malloc_r+0xea>
 8001740:	6821      	ldr	r1, [r4, #0]
 8001742:	1a6d      	subs	r5, r5, r1
 8001744:	4629      	mov	r1, r5
 8001746:	4630      	mov	r0, r6
 8001748:	f7ff ffa6 	bl	8001698 <sbrk_aligned>
 800174c:	3001      	adds	r0, #1
 800174e:	d03a      	beq.n	80017c6 <_malloc_r+0xea>
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	442b      	add	r3, r5
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	f8d8 3000 	ldr.w	r3, [r8]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	bb62      	cbnz	r2, 80017b8 <_malloc_r+0xdc>
 800175e:	f8c8 7000 	str.w	r7, [r8]
 8001762:	e00f      	b.n	8001784 <_malloc_r+0xa8>
 8001764:	6822      	ldr	r2, [r4, #0]
 8001766:	1b52      	subs	r2, r2, r5
 8001768:	d420      	bmi.n	80017ac <_malloc_r+0xd0>
 800176a:	2a0b      	cmp	r2, #11
 800176c:	d917      	bls.n	800179e <_malloc_r+0xc2>
 800176e:	1961      	adds	r1, r4, r5
 8001770:	42a3      	cmp	r3, r4
 8001772:	6025      	str	r5, [r4, #0]
 8001774:	bf18      	it	ne
 8001776:	6059      	strne	r1, [r3, #4]
 8001778:	6863      	ldr	r3, [r4, #4]
 800177a:	bf08      	it	eq
 800177c:	f8c8 1000 	streq.w	r1, [r8]
 8001780:	5162      	str	r2, [r4, r5]
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	4630      	mov	r0, r6
 8001786:	f000 f82f 	bl	80017e8 <__malloc_unlock>
 800178a:	f104 000b 	add.w	r0, r4, #11
 800178e:	1d23      	adds	r3, r4, #4
 8001790:	f020 0007 	bic.w	r0, r0, #7
 8001794:	1ac2      	subs	r2, r0, r3
 8001796:	bf1c      	itt	ne
 8001798:	1a1b      	subne	r3, r3, r0
 800179a:	50a3      	strne	r3, [r4, r2]
 800179c:	e7af      	b.n	80016fe <_malloc_r+0x22>
 800179e:	6862      	ldr	r2, [r4, #4]
 80017a0:	42a3      	cmp	r3, r4
 80017a2:	bf0c      	ite	eq
 80017a4:	f8c8 2000 	streq.w	r2, [r8]
 80017a8:	605a      	strne	r2, [r3, #4]
 80017aa:	e7eb      	b.n	8001784 <_malloc_r+0xa8>
 80017ac:	4623      	mov	r3, r4
 80017ae:	6864      	ldr	r4, [r4, #4]
 80017b0:	e7ae      	b.n	8001710 <_malloc_r+0x34>
 80017b2:	463c      	mov	r4, r7
 80017b4:	687f      	ldr	r7, [r7, #4]
 80017b6:	e7b6      	b.n	8001726 <_malloc_r+0x4a>
 80017b8:	461a      	mov	r2, r3
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	42a3      	cmp	r3, r4
 80017be:	d1fb      	bne.n	80017b8 <_malloc_r+0xdc>
 80017c0:	2300      	movs	r3, #0
 80017c2:	6053      	str	r3, [r2, #4]
 80017c4:	e7de      	b.n	8001784 <_malloc_r+0xa8>
 80017c6:	230c      	movs	r3, #12
 80017c8:	6033      	str	r3, [r6, #0]
 80017ca:	4630      	mov	r0, r6
 80017cc:	f000 f80c 	bl	80017e8 <__malloc_unlock>
 80017d0:	e794      	b.n	80016fc <_malloc_r+0x20>
 80017d2:	6005      	str	r5, [r0, #0]
 80017d4:	e7d6      	b.n	8001784 <_malloc_r+0xa8>
 80017d6:	bf00      	nop
 80017d8:	200003a0 	.word	0x200003a0

080017dc <__malloc_lock>:
 80017dc:	4801      	ldr	r0, [pc, #4]	@ (80017e4 <__malloc_lock+0x8>)
 80017de:	f7ff bf06 	b.w	80015ee <__retarget_lock_acquire_recursive>
 80017e2:	bf00      	nop
 80017e4:	20000398 	.word	0x20000398

080017e8 <__malloc_unlock>:
 80017e8:	4801      	ldr	r0, [pc, #4]	@ (80017f0 <__malloc_unlock+0x8>)
 80017ea:	f7ff bf01 	b.w	80015f0 <__retarget_lock_release_recursive>
 80017ee:	bf00      	nop
 80017f0:	20000398 	.word	0x20000398

080017f4 <__ssputs_r>:
 80017f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017f8:	688e      	ldr	r6, [r1, #8]
 80017fa:	461f      	mov	r7, r3
 80017fc:	42be      	cmp	r6, r7
 80017fe:	680b      	ldr	r3, [r1, #0]
 8001800:	4682      	mov	sl, r0
 8001802:	460c      	mov	r4, r1
 8001804:	4690      	mov	r8, r2
 8001806:	d82d      	bhi.n	8001864 <__ssputs_r+0x70>
 8001808:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800180c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001810:	d026      	beq.n	8001860 <__ssputs_r+0x6c>
 8001812:	6965      	ldr	r5, [r4, #20]
 8001814:	6909      	ldr	r1, [r1, #16]
 8001816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800181a:	eba3 0901 	sub.w	r9, r3, r1
 800181e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001822:	1c7b      	adds	r3, r7, #1
 8001824:	444b      	add	r3, r9
 8001826:	106d      	asrs	r5, r5, #1
 8001828:	429d      	cmp	r5, r3
 800182a:	bf38      	it	cc
 800182c:	461d      	movcc	r5, r3
 800182e:	0553      	lsls	r3, r2, #21
 8001830:	d527      	bpl.n	8001882 <__ssputs_r+0x8e>
 8001832:	4629      	mov	r1, r5
 8001834:	f7ff ff52 	bl	80016dc <_malloc_r>
 8001838:	4606      	mov	r6, r0
 800183a:	b360      	cbz	r0, 8001896 <__ssputs_r+0xa2>
 800183c:	6921      	ldr	r1, [r4, #16]
 800183e:	464a      	mov	r2, r9
 8001840:	f000 fc18 	bl	8002074 <memcpy>
 8001844:	89a3      	ldrh	r3, [r4, #12]
 8001846:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800184a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184e:	81a3      	strh	r3, [r4, #12]
 8001850:	6126      	str	r6, [r4, #16]
 8001852:	6165      	str	r5, [r4, #20]
 8001854:	444e      	add	r6, r9
 8001856:	eba5 0509 	sub.w	r5, r5, r9
 800185a:	6026      	str	r6, [r4, #0]
 800185c:	60a5      	str	r5, [r4, #8]
 800185e:	463e      	mov	r6, r7
 8001860:	42be      	cmp	r6, r7
 8001862:	d900      	bls.n	8001866 <__ssputs_r+0x72>
 8001864:	463e      	mov	r6, r7
 8001866:	6820      	ldr	r0, [r4, #0]
 8001868:	4632      	mov	r2, r6
 800186a:	4641      	mov	r1, r8
 800186c:	f000 fbb6 	bl	8001fdc <memmove>
 8001870:	68a3      	ldr	r3, [r4, #8]
 8001872:	1b9b      	subs	r3, r3, r6
 8001874:	60a3      	str	r3, [r4, #8]
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	4433      	add	r3, r6
 800187a:	6023      	str	r3, [r4, #0]
 800187c:	2000      	movs	r0, #0
 800187e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001882:	462a      	mov	r2, r5
 8001884:	f000 fc04 	bl	8002090 <_realloc_r>
 8001888:	4606      	mov	r6, r0
 800188a:	2800      	cmp	r0, #0
 800188c:	d1e0      	bne.n	8001850 <__ssputs_r+0x5c>
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	4650      	mov	r0, sl
 8001892:	f7ff feb7 	bl	8001604 <_free_r>
 8001896:	230c      	movs	r3, #12
 8001898:	f8ca 3000 	str.w	r3, [sl]
 800189c:	89a3      	ldrh	r3, [r4, #12]
 800189e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018a2:	81a3      	strh	r3, [r4, #12]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	e7e9      	b.n	800187e <__ssputs_r+0x8a>
	...

080018ac <_svfiprintf_r>:
 80018ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b0:	4698      	mov	r8, r3
 80018b2:	898b      	ldrh	r3, [r1, #12]
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	b09d      	sub	sp, #116	@ 0x74
 80018b8:	4607      	mov	r7, r0
 80018ba:	460d      	mov	r5, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	d510      	bpl.n	80018e2 <_svfiprintf_r+0x36>
 80018c0:	690b      	ldr	r3, [r1, #16]
 80018c2:	b973      	cbnz	r3, 80018e2 <_svfiprintf_r+0x36>
 80018c4:	2140      	movs	r1, #64	@ 0x40
 80018c6:	f7ff ff09 	bl	80016dc <_malloc_r>
 80018ca:	6028      	str	r0, [r5, #0]
 80018cc:	6128      	str	r0, [r5, #16]
 80018ce:	b930      	cbnz	r0, 80018de <_svfiprintf_r+0x32>
 80018d0:	230c      	movs	r3, #12
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	b01d      	add	sp, #116	@ 0x74
 80018da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018de:	2340      	movs	r3, #64	@ 0x40
 80018e0:	616b      	str	r3, [r5, #20]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80018e6:	2320      	movs	r3, #32
 80018e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80018ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80018f0:	2330      	movs	r3, #48	@ 0x30
 80018f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001a90 <_svfiprintf_r+0x1e4>
 80018f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80018fa:	f04f 0901 	mov.w	r9, #1
 80018fe:	4623      	mov	r3, r4
 8001900:	469a      	mov	sl, r3
 8001902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001906:	b10a      	cbz	r2, 800190c <_svfiprintf_r+0x60>
 8001908:	2a25      	cmp	r2, #37	@ 0x25
 800190a:	d1f9      	bne.n	8001900 <_svfiprintf_r+0x54>
 800190c:	ebba 0b04 	subs.w	fp, sl, r4
 8001910:	d00b      	beq.n	800192a <_svfiprintf_r+0x7e>
 8001912:	465b      	mov	r3, fp
 8001914:	4622      	mov	r2, r4
 8001916:	4629      	mov	r1, r5
 8001918:	4638      	mov	r0, r7
 800191a:	f7ff ff6b 	bl	80017f4 <__ssputs_r>
 800191e:	3001      	adds	r0, #1
 8001920:	f000 80a7 	beq.w	8001a72 <_svfiprintf_r+0x1c6>
 8001924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001926:	445a      	add	r2, fp
 8001928:	9209      	str	r2, [sp, #36]	@ 0x24
 800192a:	f89a 3000 	ldrb.w	r3, [sl]
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 809f 	beq.w	8001a72 <_svfiprintf_r+0x1c6>
 8001934:	2300      	movs	r3, #0
 8001936:	f04f 32ff 	mov.w	r2, #4294967295
 800193a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800193e:	f10a 0a01 	add.w	sl, sl, #1
 8001942:	9304      	str	r3, [sp, #16]
 8001944:	9307      	str	r3, [sp, #28]
 8001946:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800194a:	931a      	str	r3, [sp, #104]	@ 0x68
 800194c:	4654      	mov	r4, sl
 800194e:	2205      	movs	r2, #5
 8001950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001954:	484e      	ldr	r0, [pc, #312]	@ (8001a90 <_svfiprintf_r+0x1e4>)
 8001956:	f7fe fc4b 	bl	80001f0 <memchr>
 800195a:	9a04      	ldr	r2, [sp, #16]
 800195c:	b9d8      	cbnz	r0, 8001996 <_svfiprintf_r+0xea>
 800195e:	06d0      	lsls	r0, r2, #27
 8001960:	bf44      	itt	mi
 8001962:	2320      	movmi	r3, #32
 8001964:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001968:	0711      	lsls	r1, r2, #28
 800196a:	bf44      	itt	mi
 800196c:	232b      	movmi	r3, #43	@ 0x2b
 800196e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001972:	f89a 3000 	ldrb.w	r3, [sl]
 8001976:	2b2a      	cmp	r3, #42	@ 0x2a
 8001978:	d015      	beq.n	80019a6 <_svfiprintf_r+0xfa>
 800197a:	9a07      	ldr	r2, [sp, #28]
 800197c:	4654      	mov	r4, sl
 800197e:	2000      	movs	r0, #0
 8001980:	f04f 0c0a 	mov.w	ip, #10
 8001984:	4621      	mov	r1, r4
 8001986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800198a:	3b30      	subs	r3, #48	@ 0x30
 800198c:	2b09      	cmp	r3, #9
 800198e:	d94b      	bls.n	8001a28 <_svfiprintf_r+0x17c>
 8001990:	b1b0      	cbz	r0, 80019c0 <_svfiprintf_r+0x114>
 8001992:	9207      	str	r2, [sp, #28]
 8001994:	e014      	b.n	80019c0 <_svfiprintf_r+0x114>
 8001996:	eba0 0308 	sub.w	r3, r0, r8
 800199a:	fa09 f303 	lsl.w	r3, r9, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	9304      	str	r3, [sp, #16]
 80019a2:	46a2      	mov	sl, r4
 80019a4:	e7d2      	b.n	800194c <_svfiprintf_r+0xa0>
 80019a6:	9b03      	ldr	r3, [sp, #12]
 80019a8:	1d19      	adds	r1, r3, #4
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	9103      	str	r1, [sp, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	bfbb      	ittet	lt
 80019b2:	425b      	neglt	r3, r3
 80019b4:	f042 0202 	orrlt.w	r2, r2, #2
 80019b8:	9307      	strge	r3, [sp, #28]
 80019ba:	9307      	strlt	r3, [sp, #28]
 80019bc:	bfb8      	it	lt
 80019be:	9204      	strlt	r2, [sp, #16]
 80019c0:	7823      	ldrb	r3, [r4, #0]
 80019c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80019c4:	d10a      	bne.n	80019dc <_svfiprintf_r+0x130>
 80019c6:	7863      	ldrb	r3, [r4, #1]
 80019c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80019ca:	d132      	bne.n	8001a32 <_svfiprintf_r+0x186>
 80019cc:	9b03      	ldr	r3, [sp, #12]
 80019ce:	1d1a      	adds	r2, r3, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	9203      	str	r2, [sp, #12]
 80019d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80019d8:	3402      	adds	r4, #2
 80019da:	9305      	str	r3, [sp, #20]
 80019dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001aa0 <_svfiprintf_r+0x1f4>
 80019e0:	7821      	ldrb	r1, [r4, #0]
 80019e2:	2203      	movs	r2, #3
 80019e4:	4650      	mov	r0, sl
 80019e6:	f7fe fc03 	bl	80001f0 <memchr>
 80019ea:	b138      	cbz	r0, 80019fc <_svfiprintf_r+0x150>
 80019ec:	9b04      	ldr	r3, [sp, #16]
 80019ee:	eba0 000a 	sub.w	r0, r0, sl
 80019f2:	2240      	movs	r2, #64	@ 0x40
 80019f4:	4082      	lsls	r2, r0
 80019f6:	4313      	orrs	r3, r2
 80019f8:	3401      	adds	r4, #1
 80019fa:	9304      	str	r3, [sp, #16]
 80019fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a00:	4824      	ldr	r0, [pc, #144]	@ (8001a94 <_svfiprintf_r+0x1e8>)
 8001a02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a06:	2206      	movs	r2, #6
 8001a08:	f7fe fbf2 	bl	80001f0 <memchr>
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d036      	beq.n	8001a7e <_svfiprintf_r+0x1d2>
 8001a10:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <_svfiprintf_r+0x1ec>)
 8001a12:	bb1b      	cbnz	r3, 8001a5c <_svfiprintf_r+0x1b0>
 8001a14:	9b03      	ldr	r3, [sp, #12]
 8001a16:	3307      	adds	r3, #7
 8001a18:	f023 0307 	bic.w	r3, r3, #7
 8001a1c:	3308      	adds	r3, #8
 8001a1e:	9303      	str	r3, [sp, #12]
 8001a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a22:	4433      	add	r3, r6
 8001a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a26:	e76a      	b.n	80018fe <_svfiprintf_r+0x52>
 8001a28:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	2001      	movs	r0, #1
 8001a30:	e7a8      	b.n	8001984 <_svfiprintf_r+0xd8>
 8001a32:	2300      	movs	r3, #0
 8001a34:	3401      	adds	r4, #1
 8001a36:	9305      	str	r3, [sp, #20]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 0c0a 	mov.w	ip, #10
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a44:	3a30      	subs	r2, #48	@ 0x30
 8001a46:	2a09      	cmp	r2, #9
 8001a48:	d903      	bls.n	8001a52 <_svfiprintf_r+0x1a6>
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0c6      	beq.n	80019dc <_svfiprintf_r+0x130>
 8001a4e:	9105      	str	r1, [sp, #20]
 8001a50:	e7c4      	b.n	80019dc <_svfiprintf_r+0x130>
 8001a52:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a56:	4604      	mov	r4, r0
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e7f0      	b.n	8001a3e <_svfiprintf_r+0x192>
 8001a5c:	ab03      	add	r3, sp, #12
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	462a      	mov	r2, r5
 8001a62:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <_svfiprintf_r+0x1f0>)
 8001a64:	a904      	add	r1, sp, #16
 8001a66:	4638      	mov	r0, r7
 8001a68:	f3af 8000 	nop.w
 8001a6c:	1c42      	adds	r2, r0, #1
 8001a6e:	4606      	mov	r6, r0
 8001a70:	d1d6      	bne.n	8001a20 <_svfiprintf_r+0x174>
 8001a72:	89ab      	ldrh	r3, [r5, #12]
 8001a74:	065b      	lsls	r3, r3, #25
 8001a76:	f53f af2d 	bmi.w	80018d4 <_svfiprintf_r+0x28>
 8001a7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a7c:	e72c      	b.n	80018d8 <_svfiprintf_r+0x2c>
 8001a7e:	ab03      	add	r3, sp, #12
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	462a      	mov	r2, r5
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <_svfiprintf_r+0x1f0>)
 8001a86:	a904      	add	r1, sp, #16
 8001a88:	4638      	mov	r0, r7
 8001a8a:	f000 f879 	bl	8001b80 <_printf_i>
 8001a8e:	e7ed      	b.n	8001a6c <_svfiprintf_r+0x1c0>
 8001a90:	08002646 	.word	0x08002646
 8001a94:	08002650 	.word	0x08002650
 8001a98:	00000000 	.word	0x00000000
 8001a9c:	080017f5 	.word	0x080017f5
 8001aa0:	0800264c 	.word	0x0800264c

08001aa4 <_printf_common>:
 8001aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa8:	4616      	mov	r6, r2
 8001aaa:	4698      	mov	r8, r3
 8001aac:	688a      	ldr	r2, [r1, #8]
 8001aae:	690b      	ldr	r3, [r1, #16]
 8001ab0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	bfb8      	it	lt
 8001ab8:	4613      	movlt	r3, r2
 8001aba:	6033      	str	r3, [r6, #0]
 8001abc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ac0:	4607      	mov	r7, r0
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	b10a      	cbz	r2, 8001aca <_printf_common+0x26>
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	6033      	str	r3, [r6, #0]
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	0699      	lsls	r1, r3, #26
 8001ace:	bf42      	ittt	mi
 8001ad0:	6833      	ldrmi	r3, [r6, #0]
 8001ad2:	3302      	addmi	r3, #2
 8001ad4:	6033      	strmi	r3, [r6, #0]
 8001ad6:	6825      	ldr	r5, [r4, #0]
 8001ad8:	f015 0506 	ands.w	r5, r5, #6
 8001adc:	d106      	bne.n	8001aec <_printf_common+0x48>
 8001ade:	f104 0a19 	add.w	sl, r4, #25
 8001ae2:	68e3      	ldr	r3, [r4, #12]
 8001ae4:	6832      	ldr	r2, [r6, #0]
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	42ab      	cmp	r3, r5
 8001aea:	dc26      	bgt.n	8001b3a <_printf_common+0x96>
 8001aec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	3b00      	subs	r3, #0
 8001af4:	bf18      	it	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	0692      	lsls	r2, r2, #26
 8001afa:	d42b      	bmi.n	8001b54 <_printf_common+0xb0>
 8001afc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b00:	4641      	mov	r1, r8
 8001b02:	4638      	mov	r0, r7
 8001b04:	47c8      	blx	r9
 8001b06:	3001      	adds	r0, #1
 8001b08:	d01e      	beq.n	8001b48 <_printf_common+0xa4>
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	6922      	ldr	r2, [r4, #16]
 8001b0e:	f003 0306 	and.w	r3, r3, #6
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf02      	ittt	eq
 8001b16:	68e5      	ldreq	r5, [r4, #12]
 8001b18:	6833      	ldreq	r3, [r6, #0]
 8001b1a:	1aed      	subeq	r5, r5, r3
 8001b1c:	68a3      	ldr	r3, [r4, #8]
 8001b1e:	bf0c      	ite	eq
 8001b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b24:	2500      	movne	r5, #0
 8001b26:	4293      	cmp	r3, r2
 8001b28:	bfc4      	itt	gt
 8001b2a:	1a9b      	subgt	r3, r3, r2
 8001b2c:	18ed      	addgt	r5, r5, r3
 8001b2e:	2600      	movs	r6, #0
 8001b30:	341a      	adds	r4, #26
 8001b32:	42b5      	cmp	r5, r6
 8001b34:	d11a      	bne.n	8001b6c <_printf_common+0xc8>
 8001b36:	2000      	movs	r0, #0
 8001b38:	e008      	b.n	8001b4c <_printf_common+0xa8>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4652      	mov	r2, sl
 8001b3e:	4641      	mov	r1, r8
 8001b40:	4638      	mov	r0, r7
 8001b42:	47c8      	blx	r9
 8001b44:	3001      	adds	r0, #1
 8001b46:	d103      	bne.n	8001b50 <_printf_common+0xac>
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b50:	3501      	adds	r5, #1
 8001b52:	e7c6      	b.n	8001ae2 <_printf_common+0x3e>
 8001b54:	18e1      	adds	r1, r4, r3
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	2030      	movs	r0, #48	@ 0x30
 8001b5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b5e:	4422      	add	r2, r4
 8001b60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b68:	3302      	adds	r3, #2
 8001b6a:	e7c7      	b.n	8001afc <_printf_common+0x58>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	4622      	mov	r2, r4
 8001b70:	4641      	mov	r1, r8
 8001b72:	4638      	mov	r0, r7
 8001b74:	47c8      	blx	r9
 8001b76:	3001      	adds	r0, #1
 8001b78:	d0e6      	beq.n	8001b48 <_printf_common+0xa4>
 8001b7a:	3601      	adds	r6, #1
 8001b7c:	e7d9      	b.n	8001b32 <_printf_common+0x8e>
	...

08001b80 <_printf_i>:
 8001b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b84:	7e0f      	ldrb	r7, [r1, #24]
 8001b86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b88:	2f78      	cmp	r7, #120	@ 0x78
 8001b8a:	4691      	mov	r9, r2
 8001b8c:	4680      	mov	r8, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	469a      	mov	sl, r3
 8001b92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b96:	d807      	bhi.n	8001ba8 <_printf_i+0x28>
 8001b98:	2f62      	cmp	r7, #98	@ 0x62
 8001b9a:	d80a      	bhi.n	8001bb2 <_printf_i+0x32>
 8001b9c:	2f00      	cmp	r7, #0
 8001b9e:	f000 80d2 	beq.w	8001d46 <_printf_i+0x1c6>
 8001ba2:	2f58      	cmp	r7, #88	@ 0x58
 8001ba4:	f000 80b9 	beq.w	8001d1a <_printf_i+0x19a>
 8001ba8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001bac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001bb0:	e03a      	b.n	8001c28 <_printf_i+0xa8>
 8001bb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001bb6:	2b15      	cmp	r3, #21
 8001bb8:	d8f6      	bhi.n	8001ba8 <_printf_i+0x28>
 8001bba:	a101      	add	r1, pc, #4	@ (adr r1, 8001bc0 <_printf_i+0x40>)
 8001bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001bc0:	08001c19 	.word	0x08001c19
 8001bc4:	08001c2d 	.word	0x08001c2d
 8001bc8:	08001ba9 	.word	0x08001ba9
 8001bcc:	08001ba9 	.word	0x08001ba9
 8001bd0:	08001ba9 	.word	0x08001ba9
 8001bd4:	08001ba9 	.word	0x08001ba9
 8001bd8:	08001c2d 	.word	0x08001c2d
 8001bdc:	08001ba9 	.word	0x08001ba9
 8001be0:	08001ba9 	.word	0x08001ba9
 8001be4:	08001ba9 	.word	0x08001ba9
 8001be8:	08001ba9 	.word	0x08001ba9
 8001bec:	08001d2d 	.word	0x08001d2d
 8001bf0:	08001c57 	.word	0x08001c57
 8001bf4:	08001ce7 	.word	0x08001ce7
 8001bf8:	08001ba9 	.word	0x08001ba9
 8001bfc:	08001ba9 	.word	0x08001ba9
 8001c00:	08001d4f 	.word	0x08001d4f
 8001c04:	08001ba9 	.word	0x08001ba9
 8001c08:	08001c57 	.word	0x08001c57
 8001c0c:	08001ba9 	.word	0x08001ba9
 8001c10:	08001ba9 	.word	0x08001ba9
 8001c14:	08001cef 	.word	0x08001cef
 8001c18:	6833      	ldr	r3, [r6, #0]
 8001c1a:	1d1a      	adds	r2, r3, #4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6032      	str	r2, [r6, #0]
 8001c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e09d      	b.n	8001d68 <_printf_i+0x1e8>
 8001c2c:	6833      	ldr	r3, [r6, #0]
 8001c2e:	6820      	ldr	r0, [r4, #0]
 8001c30:	1d19      	adds	r1, r3, #4
 8001c32:	6031      	str	r1, [r6, #0]
 8001c34:	0606      	lsls	r6, r0, #24
 8001c36:	d501      	bpl.n	8001c3c <_printf_i+0xbc>
 8001c38:	681d      	ldr	r5, [r3, #0]
 8001c3a:	e003      	b.n	8001c44 <_printf_i+0xc4>
 8001c3c:	0645      	lsls	r5, r0, #25
 8001c3e:	d5fb      	bpl.n	8001c38 <_printf_i+0xb8>
 8001c40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c44:	2d00      	cmp	r5, #0
 8001c46:	da03      	bge.n	8001c50 <_printf_i+0xd0>
 8001c48:	232d      	movs	r3, #45	@ 0x2d
 8001c4a:	426d      	negs	r5, r5
 8001c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c50:	4859      	ldr	r0, [pc, #356]	@ (8001db8 <_printf_i+0x238>)
 8001c52:	230a      	movs	r3, #10
 8001c54:	e011      	b.n	8001c7a <_printf_i+0xfa>
 8001c56:	6821      	ldr	r1, [r4, #0]
 8001c58:	6833      	ldr	r3, [r6, #0]
 8001c5a:	0608      	lsls	r0, r1, #24
 8001c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c60:	d402      	bmi.n	8001c68 <_printf_i+0xe8>
 8001c62:	0649      	lsls	r1, r1, #25
 8001c64:	bf48      	it	mi
 8001c66:	b2ad      	uxthmi	r5, r5
 8001c68:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c6a:	4853      	ldr	r0, [pc, #332]	@ (8001db8 <_printf_i+0x238>)
 8001c6c:	6033      	str	r3, [r6, #0]
 8001c6e:	bf14      	ite	ne
 8001c70:	230a      	movne	r3, #10
 8001c72:	2308      	moveq	r3, #8
 8001c74:	2100      	movs	r1, #0
 8001c76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c7a:	6866      	ldr	r6, [r4, #4]
 8001c7c:	60a6      	str	r6, [r4, #8]
 8001c7e:	2e00      	cmp	r6, #0
 8001c80:	bfa2      	ittt	ge
 8001c82:	6821      	ldrge	r1, [r4, #0]
 8001c84:	f021 0104 	bicge.w	r1, r1, #4
 8001c88:	6021      	strge	r1, [r4, #0]
 8001c8a:	b90d      	cbnz	r5, 8001c90 <_printf_i+0x110>
 8001c8c:	2e00      	cmp	r6, #0
 8001c8e:	d04b      	beq.n	8001d28 <_printf_i+0x1a8>
 8001c90:	4616      	mov	r6, r2
 8001c92:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c96:	fb03 5711 	mls	r7, r3, r1, r5
 8001c9a:	5dc7      	ldrb	r7, [r0, r7]
 8001c9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ca0:	462f      	mov	r7, r5
 8001ca2:	42bb      	cmp	r3, r7
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	d9f4      	bls.n	8001c92 <_printf_i+0x112>
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d10b      	bne.n	8001cc4 <_printf_i+0x144>
 8001cac:	6823      	ldr	r3, [r4, #0]
 8001cae:	07df      	lsls	r7, r3, #31
 8001cb0:	d508      	bpl.n	8001cc4 <_printf_i+0x144>
 8001cb2:	6923      	ldr	r3, [r4, #16]
 8001cb4:	6861      	ldr	r1, [r4, #4]
 8001cb6:	4299      	cmp	r1, r3
 8001cb8:	bfde      	ittt	le
 8001cba:	2330      	movle	r3, #48	@ 0x30
 8001cbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001cc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001cc4:	1b92      	subs	r2, r2, r6
 8001cc6:	6122      	str	r2, [r4, #16]
 8001cc8:	f8cd a000 	str.w	sl, [sp]
 8001ccc:	464b      	mov	r3, r9
 8001cce:	aa03      	add	r2, sp, #12
 8001cd0:	4621      	mov	r1, r4
 8001cd2:	4640      	mov	r0, r8
 8001cd4:	f7ff fee6 	bl	8001aa4 <_printf_common>
 8001cd8:	3001      	adds	r0, #1
 8001cda:	d14a      	bne.n	8001d72 <_printf_i+0x1f2>
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	b004      	add	sp, #16
 8001ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	f043 0320 	orr.w	r3, r3, #32
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	4833      	ldr	r0, [pc, #204]	@ (8001dbc <_printf_i+0x23c>)
 8001cf0:	2778      	movs	r7, #120	@ 0x78
 8001cf2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	6831      	ldr	r1, [r6, #0]
 8001cfa:	061f      	lsls	r7, r3, #24
 8001cfc:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d00:	d402      	bmi.n	8001d08 <_printf_i+0x188>
 8001d02:	065f      	lsls	r7, r3, #25
 8001d04:	bf48      	it	mi
 8001d06:	b2ad      	uxthmi	r5, r5
 8001d08:	6031      	str	r1, [r6, #0]
 8001d0a:	07d9      	lsls	r1, r3, #31
 8001d0c:	bf44      	itt	mi
 8001d0e:	f043 0320 	orrmi.w	r3, r3, #32
 8001d12:	6023      	strmi	r3, [r4, #0]
 8001d14:	b11d      	cbz	r5, 8001d1e <_printf_i+0x19e>
 8001d16:	2310      	movs	r3, #16
 8001d18:	e7ac      	b.n	8001c74 <_printf_i+0xf4>
 8001d1a:	4827      	ldr	r0, [pc, #156]	@ (8001db8 <_printf_i+0x238>)
 8001d1c:	e7e9      	b.n	8001cf2 <_printf_i+0x172>
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	f023 0320 	bic.w	r3, r3, #32
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	e7f6      	b.n	8001d16 <_printf_i+0x196>
 8001d28:	4616      	mov	r6, r2
 8001d2a:	e7bd      	b.n	8001ca8 <_printf_i+0x128>
 8001d2c:	6833      	ldr	r3, [r6, #0]
 8001d2e:	6825      	ldr	r5, [r4, #0]
 8001d30:	6961      	ldr	r1, [r4, #20]
 8001d32:	1d18      	adds	r0, r3, #4
 8001d34:	6030      	str	r0, [r6, #0]
 8001d36:	062e      	lsls	r6, r5, #24
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	d501      	bpl.n	8001d40 <_printf_i+0x1c0>
 8001d3c:	6019      	str	r1, [r3, #0]
 8001d3e:	e002      	b.n	8001d46 <_printf_i+0x1c6>
 8001d40:	0668      	lsls	r0, r5, #25
 8001d42:	d5fb      	bpl.n	8001d3c <_printf_i+0x1bc>
 8001d44:	8019      	strh	r1, [r3, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	6123      	str	r3, [r4, #16]
 8001d4a:	4616      	mov	r6, r2
 8001d4c:	e7bc      	b.n	8001cc8 <_printf_i+0x148>
 8001d4e:	6833      	ldr	r3, [r6, #0]
 8001d50:	1d1a      	adds	r2, r3, #4
 8001d52:	6032      	str	r2, [r6, #0]
 8001d54:	681e      	ldr	r6, [r3, #0]
 8001d56:	6862      	ldr	r2, [r4, #4]
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f7fe fa48 	bl	80001f0 <memchr>
 8001d60:	b108      	cbz	r0, 8001d66 <_printf_i+0x1e6>
 8001d62:	1b80      	subs	r0, r0, r6
 8001d64:	6060      	str	r0, [r4, #4]
 8001d66:	6863      	ldr	r3, [r4, #4]
 8001d68:	6123      	str	r3, [r4, #16]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d70:	e7aa      	b.n	8001cc8 <_printf_i+0x148>
 8001d72:	6923      	ldr	r3, [r4, #16]
 8001d74:	4632      	mov	r2, r6
 8001d76:	4649      	mov	r1, r9
 8001d78:	4640      	mov	r0, r8
 8001d7a:	47d0      	blx	sl
 8001d7c:	3001      	adds	r0, #1
 8001d7e:	d0ad      	beq.n	8001cdc <_printf_i+0x15c>
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	079b      	lsls	r3, r3, #30
 8001d84:	d413      	bmi.n	8001dae <_printf_i+0x22e>
 8001d86:	68e0      	ldr	r0, [r4, #12]
 8001d88:	9b03      	ldr	r3, [sp, #12]
 8001d8a:	4298      	cmp	r0, r3
 8001d8c:	bfb8      	it	lt
 8001d8e:	4618      	movlt	r0, r3
 8001d90:	e7a6      	b.n	8001ce0 <_printf_i+0x160>
 8001d92:	2301      	movs	r3, #1
 8001d94:	4632      	mov	r2, r6
 8001d96:	4649      	mov	r1, r9
 8001d98:	4640      	mov	r0, r8
 8001d9a:	47d0      	blx	sl
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	d09d      	beq.n	8001cdc <_printf_i+0x15c>
 8001da0:	3501      	adds	r5, #1
 8001da2:	68e3      	ldr	r3, [r4, #12]
 8001da4:	9903      	ldr	r1, [sp, #12]
 8001da6:	1a5b      	subs	r3, r3, r1
 8001da8:	42ab      	cmp	r3, r5
 8001daa:	dcf2      	bgt.n	8001d92 <_printf_i+0x212>
 8001dac:	e7eb      	b.n	8001d86 <_printf_i+0x206>
 8001dae:	2500      	movs	r5, #0
 8001db0:	f104 0619 	add.w	r6, r4, #25
 8001db4:	e7f5      	b.n	8001da2 <_printf_i+0x222>
 8001db6:	bf00      	nop
 8001db8:	08002657 	.word	0x08002657
 8001dbc:	08002668 	.word	0x08002668

08001dc0 <__sflush_r>:
 8001dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dc8:	0716      	lsls	r6, r2, #28
 8001dca:	4605      	mov	r5, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	d454      	bmi.n	8001e7a <__sflush_r+0xba>
 8001dd0:	684b      	ldr	r3, [r1, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	dc02      	bgt.n	8001ddc <__sflush_r+0x1c>
 8001dd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dd48      	ble.n	8001e6e <__sflush_r+0xae>
 8001ddc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001dde:	2e00      	cmp	r6, #0
 8001de0:	d045      	beq.n	8001e6e <__sflush_r+0xae>
 8001de2:	2300      	movs	r3, #0
 8001de4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001de8:	682f      	ldr	r7, [r5, #0]
 8001dea:	6a21      	ldr	r1, [r4, #32]
 8001dec:	602b      	str	r3, [r5, #0]
 8001dee:	d030      	beq.n	8001e52 <__sflush_r+0x92>
 8001df0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001df2:	89a3      	ldrh	r3, [r4, #12]
 8001df4:	0759      	lsls	r1, r3, #29
 8001df6:	d505      	bpl.n	8001e04 <__sflush_r+0x44>
 8001df8:	6863      	ldr	r3, [r4, #4]
 8001dfa:	1ad2      	subs	r2, r2, r3
 8001dfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001dfe:	b10b      	cbz	r3, 8001e04 <__sflush_r+0x44>
 8001e00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e02:	1ad2      	subs	r2, r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e08:	6a21      	ldr	r1, [r4, #32]
 8001e0a:	4628      	mov	r0, r5
 8001e0c:	47b0      	blx	r6
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	89a3      	ldrh	r3, [r4, #12]
 8001e12:	d106      	bne.n	8001e22 <__sflush_r+0x62>
 8001e14:	6829      	ldr	r1, [r5, #0]
 8001e16:	291d      	cmp	r1, #29
 8001e18:	d82b      	bhi.n	8001e72 <__sflush_r+0xb2>
 8001e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ec4 <__sflush_r+0x104>)
 8001e1c:	410a      	asrs	r2, r1
 8001e1e:	07d6      	lsls	r6, r2, #31
 8001e20:	d427      	bmi.n	8001e72 <__sflush_r+0xb2>
 8001e22:	2200      	movs	r2, #0
 8001e24:	6062      	str	r2, [r4, #4]
 8001e26:	04d9      	lsls	r1, r3, #19
 8001e28:	6922      	ldr	r2, [r4, #16]
 8001e2a:	6022      	str	r2, [r4, #0]
 8001e2c:	d504      	bpl.n	8001e38 <__sflush_r+0x78>
 8001e2e:	1c42      	adds	r2, r0, #1
 8001e30:	d101      	bne.n	8001e36 <__sflush_r+0x76>
 8001e32:	682b      	ldr	r3, [r5, #0]
 8001e34:	b903      	cbnz	r3, 8001e38 <__sflush_r+0x78>
 8001e36:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e3a:	602f      	str	r7, [r5, #0]
 8001e3c:	b1b9      	cbz	r1, 8001e6e <__sflush_r+0xae>
 8001e3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e42:	4299      	cmp	r1, r3
 8001e44:	d002      	beq.n	8001e4c <__sflush_r+0x8c>
 8001e46:	4628      	mov	r0, r5
 8001e48:	f7ff fbdc 	bl	8001604 <_free_r>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e50:	e00d      	b.n	8001e6e <__sflush_r+0xae>
 8001e52:	2301      	movs	r3, #1
 8001e54:	4628      	mov	r0, r5
 8001e56:	47b0      	blx	r6
 8001e58:	4602      	mov	r2, r0
 8001e5a:	1c50      	adds	r0, r2, #1
 8001e5c:	d1c9      	bne.n	8001df2 <__sflush_r+0x32>
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0c6      	beq.n	8001df2 <__sflush_r+0x32>
 8001e64:	2b1d      	cmp	r3, #29
 8001e66:	d001      	beq.n	8001e6c <__sflush_r+0xac>
 8001e68:	2b16      	cmp	r3, #22
 8001e6a:	d11e      	bne.n	8001eaa <__sflush_r+0xea>
 8001e6c:	602f      	str	r7, [r5, #0]
 8001e6e:	2000      	movs	r0, #0
 8001e70:	e022      	b.n	8001eb8 <__sflush_r+0xf8>
 8001e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	e01b      	b.n	8001eb2 <__sflush_r+0xf2>
 8001e7a:	690f      	ldr	r7, [r1, #16]
 8001e7c:	2f00      	cmp	r7, #0
 8001e7e:	d0f6      	beq.n	8001e6e <__sflush_r+0xae>
 8001e80:	0793      	lsls	r3, r2, #30
 8001e82:	680e      	ldr	r6, [r1, #0]
 8001e84:	bf08      	it	eq
 8001e86:	694b      	ldreq	r3, [r1, #20]
 8001e88:	600f      	str	r7, [r1, #0]
 8001e8a:	bf18      	it	ne
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	eba6 0807 	sub.w	r8, r6, r7
 8001e92:	608b      	str	r3, [r1, #8]
 8001e94:	f1b8 0f00 	cmp.w	r8, #0
 8001e98:	dde9      	ble.n	8001e6e <__sflush_r+0xae>
 8001e9a:	6a21      	ldr	r1, [r4, #32]
 8001e9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e9e:	4643      	mov	r3, r8
 8001ea0:	463a      	mov	r2, r7
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	47b0      	blx	r6
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	dc08      	bgt.n	8001ebc <__sflush_r+0xfc>
 8001eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eb2:	81a3      	strh	r3, [r4, #12]
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ebc:	4407      	add	r7, r0
 8001ebe:	eba8 0800 	sub.w	r8, r8, r0
 8001ec2:	e7e7      	b.n	8001e94 <__sflush_r+0xd4>
 8001ec4:	dfbffffe 	.word	0xdfbffffe

08001ec8 <_fflush_r>:
 8001ec8:	b538      	push	{r3, r4, r5, lr}
 8001eca:	690b      	ldr	r3, [r1, #16]
 8001ecc:	4605      	mov	r5, r0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	b913      	cbnz	r3, 8001ed8 <_fflush_r+0x10>
 8001ed2:	2500      	movs	r5, #0
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	bd38      	pop	{r3, r4, r5, pc}
 8001ed8:	b118      	cbz	r0, 8001ee2 <_fflush_r+0x1a>
 8001eda:	6a03      	ldr	r3, [r0, #32]
 8001edc:	b90b      	cbnz	r3, 8001ee2 <_fflush_r+0x1a>
 8001ede:	f7ff f8e3 	bl	80010a8 <__sinit>
 8001ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f3      	beq.n	8001ed2 <_fflush_r+0xa>
 8001eea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001eec:	07d0      	lsls	r0, r2, #31
 8001eee:	d404      	bmi.n	8001efa <_fflush_r+0x32>
 8001ef0:	0599      	lsls	r1, r3, #22
 8001ef2:	d402      	bmi.n	8001efa <_fflush_r+0x32>
 8001ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ef6:	f7ff fb7a 	bl	80015ee <__retarget_lock_acquire_recursive>
 8001efa:	4628      	mov	r0, r5
 8001efc:	4621      	mov	r1, r4
 8001efe:	f7ff ff5f 	bl	8001dc0 <__sflush_r>
 8001f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f04:	07da      	lsls	r2, r3, #31
 8001f06:	4605      	mov	r5, r0
 8001f08:	d4e4      	bmi.n	8001ed4 <_fflush_r+0xc>
 8001f0a:	89a3      	ldrh	r3, [r4, #12]
 8001f0c:	059b      	lsls	r3, r3, #22
 8001f0e:	d4e1      	bmi.n	8001ed4 <_fflush_r+0xc>
 8001f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f12:	f7ff fb6d 	bl	80015f0 <__retarget_lock_release_recursive>
 8001f16:	e7dd      	b.n	8001ed4 <_fflush_r+0xc>

08001f18 <__swhatbuf_r>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f20:	2900      	cmp	r1, #0
 8001f22:	b096      	sub	sp, #88	@ 0x58
 8001f24:	4615      	mov	r5, r2
 8001f26:	461e      	mov	r6, r3
 8001f28:	da0d      	bge.n	8001f46 <__swhatbuf_r+0x2e>
 8001f2a:	89a3      	ldrh	r3, [r4, #12]
 8001f2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f30:	f04f 0100 	mov.w	r1, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2340      	movne	r3, #64	@ 0x40
 8001f38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	6031      	str	r1, [r6, #0]
 8001f40:	602b      	str	r3, [r5, #0]
 8001f42:	b016      	add	sp, #88	@ 0x58
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
 8001f46:	466a      	mov	r2, sp
 8001f48:	f000 f862 	bl	8002010 <_fstat_r>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	dbec      	blt.n	8001f2a <__swhatbuf_r+0x12>
 8001f50:	9901      	ldr	r1, [sp, #4]
 8001f52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f5a:	4259      	negs	r1, r3
 8001f5c:	4159      	adcs	r1, r3
 8001f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f62:	e7eb      	b.n	8001f3c <__swhatbuf_r+0x24>

08001f64 <__smakebuf_r>:
 8001f64:	898b      	ldrh	r3, [r1, #12]
 8001f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f68:	079d      	lsls	r5, r3, #30
 8001f6a:	4606      	mov	r6, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	d507      	bpl.n	8001f80 <__smakebuf_r+0x1c>
 8001f70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001f74:	6023      	str	r3, [r4, #0]
 8001f76:	6123      	str	r3, [r4, #16]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	6163      	str	r3, [r4, #20]
 8001f7c:	b003      	add	sp, #12
 8001f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f80:	ab01      	add	r3, sp, #4
 8001f82:	466a      	mov	r2, sp
 8001f84:	f7ff ffc8 	bl	8001f18 <__swhatbuf_r>
 8001f88:	9f00      	ldr	r7, [sp, #0]
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	4639      	mov	r1, r7
 8001f8e:	4630      	mov	r0, r6
 8001f90:	f7ff fba4 	bl	80016dc <_malloc_r>
 8001f94:	b948      	cbnz	r0, 8001faa <__smakebuf_r+0x46>
 8001f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f9a:	059a      	lsls	r2, r3, #22
 8001f9c:	d4ee      	bmi.n	8001f7c <__smakebuf_r+0x18>
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	e7e2      	b.n	8001f70 <__smakebuf_r+0xc>
 8001faa:	89a3      	ldrh	r3, [r4, #12]
 8001fac:	6020      	str	r0, [r4, #0]
 8001fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb2:	81a3      	strh	r3, [r4, #12]
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001fba:	b15b      	cbz	r3, 8001fd4 <__smakebuf_r+0x70>
 8001fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f000 f837 	bl	8002034 <_isatty_r>
 8001fc6:	b128      	cbz	r0, 8001fd4 <__smakebuf_r+0x70>
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	f023 0303 	bic.w	r3, r3, #3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	81a3      	strh	r3, [r4, #12]
 8001fd4:	89a3      	ldrh	r3, [r4, #12]
 8001fd6:	431d      	orrs	r5, r3
 8001fd8:	81a5      	strh	r5, [r4, #12]
 8001fda:	e7cf      	b.n	8001f7c <__smakebuf_r+0x18>

08001fdc <memmove>:
 8001fdc:	4288      	cmp	r0, r1
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	eb01 0402 	add.w	r4, r1, r2
 8001fe4:	d902      	bls.n	8001fec <memmove+0x10>
 8001fe6:	4284      	cmp	r4, r0
 8001fe8:	4623      	mov	r3, r4
 8001fea:	d807      	bhi.n	8001ffc <memmove+0x20>
 8001fec:	1e43      	subs	r3, r0, #1
 8001fee:	42a1      	cmp	r1, r4
 8001ff0:	d008      	beq.n	8002004 <memmove+0x28>
 8001ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ffa:	e7f8      	b.n	8001fee <memmove+0x12>
 8001ffc:	4402      	add	r2, r0
 8001ffe:	4601      	mov	r1, r0
 8002000:	428a      	cmp	r2, r1
 8002002:	d100      	bne.n	8002006 <memmove+0x2a>
 8002004:	bd10      	pop	{r4, pc}
 8002006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800200a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800200e:	e7f7      	b.n	8002000 <memmove+0x24>

08002010 <_fstat_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4d07      	ldr	r5, [pc, #28]	@ (8002030 <_fstat_r+0x20>)
 8002014:	2300      	movs	r3, #0
 8002016:	4604      	mov	r4, r0
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	602b      	str	r3, [r5, #0]
 800201e:	f000 f875 	bl	800210c <_fstat>
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	d102      	bne.n	800202c <_fstat_r+0x1c>
 8002026:	682b      	ldr	r3, [r5, #0]
 8002028:	b103      	cbz	r3, 800202c <_fstat_r+0x1c>
 800202a:	6023      	str	r3, [r4, #0]
 800202c:	bd38      	pop	{r3, r4, r5, pc}
 800202e:	bf00      	nop
 8002030:	20000394 	.word	0x20000394

08002034 <_isatty_r>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	4d06      	ldr	r5, [pc, #24]	@ (8002050 <_isatty_r+0x1c>)
 8002038:	2300      	movs	r3, #0
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	602b      	str	r3, [r5, #0]
 8002040:	f000 f86c 	bl	800211c <_isatty>
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d102      	bne.n	800204e <_isatty_r+0x1a>
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	b103      	cbz	r3, 800204e <_isatty_r+0x1a>
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	bd38      	pop	{r3, r4, r5, pc}
 8002050:	20000394 	.word	0x20000394

08002054 <_sbrk_r>:
 8002054:	b538      	push	{r3, r4, r5, lr}
 8002056:	4d06      	ldr	r5, [pc, #24]	@ (8002070 <_sbrk_r+0x1c>)
 8002058:	2300      	movs	r3, #0
 800205a:	4604      	mov	r4, r0
 800205c:	4608      	mov	r0, r1
 800205e:	602b      	str	r3, [r5, #0]
 8002060:	f000 f874 	bl	800214c <_sbrk>
 8002064:	1c43      	adds	r3, r0, #1
 8002066:	d102      	bne.n	800206e <_sbrk_r+0x1a>
 8002068:	682b      	ldr	r3, [r5, #0]
 800206a:	b103      	cbz	r3, 800206e <_sbrk_r+0x1a>
 800206c:	6023      	str	r3, [r4, #0]
 800206e:	bd38      	pop	{r3, r4, r5, pc}
 8002070:	20000394 	.word	0x20000394

08002074 <memcpy>:
 8002074:	440a      	add	r2, r1
 8002076:	4291      	cmp	r1, r2
 8002078:	f100 33ff 	add.w	r3, r0, #4294967295
 800207c:	d100      	bne.n	8002080 <memcpy+0xc>
 800207e:	4770      	bx	lr
 8002080:	b510      	push	{r4, lr}
 8002082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800208a:	4291      	cmp	r1, r2
 800208c:	d1f9      	bne.n	8002082 <memcpy+0xe>
 800208e:	bd10      	pop	{r4, pc}

08002090 <_realloc_r>:
 8002090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002094:	4680      	mov	r8, r0
 8002096:	4615      	mov	r5, r2
 8002098:	460c      	mov	r4, r1
 800209a:	b921      	cbnz	r1, 80020a6 <_realloc_r+0x16>
 800209c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020a0:	4611      	mov	r1, r2
 80020a2:	f7ff bb1b 	b.w	80016dc <_malloc_r>
 80020a6:	b92a      	cbnz	r2, 80020b4 <_realloc_r+0x24>
 80020a8:	f7ff faac 	bl	8001604 <_free_r>
 80020ac:	2400      	movs	r4, #0
 80020ae:	4620      	mov	r0, r4
 80020b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b4:	f000 f81a 	bl	80020ec <_malloc_usable_size_r>
 80020b8:	4285      	cmp	r5, r0
 80020ba:	4606      	mov	r6, r0
 80020bc:	d802      	bhi.n	80020c4 <_realloc_r+0x34>
 80020be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80020c2:	d8f4      	bhi.n	80020ae <_realloc_r+0x1e>
 80020c4:	4629      	mov	r1, r5
 80020c6:	4640      	mov	r0, r8
 80020c8:	f7ff fb08 	bl	80016dc <_malloc_r>
 80020cc:	4607      	mov	r7, r0
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d0ec      	beq.n	80020ac <_realloc_r+0x1c>
 80020d2:	42b5      	cmp	r5, r6
 80020d4:	462a      	mov	r2, r5
 80020d6:	4621      	mov	r1, r4
 80020d8:	bf28      	it	cs
 80020da:	4632      	movcs	r2, r6
 80020dc:	f7ff ffca 	bl	8002074 <memcpy>
 80020e0:	4621      	mov	r1, r4
 80020e2:	4640      	mov	r0, r8
 80020e4:	f7ff fa8e 	bl	8001604 <_free_r>
 80020e8:	463c      	mov	r4, r7
 80020ea:	e7e0      	b.n	80020ae <_realloc_r+0x1e>

080020ec <_malloc_usable_size_r>:
 80020ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020f0:	1f18      	subs	r0, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bfbc      	itt	lt
 80020f6:	580b      	ldrlt	r3, [r1, r0]
 80020f8:	18c0      	addlt	r0, r0, r3
 80020fa:	4770      	bx	lr

080020fc <_close>:
 80020fc:	4b02      	ldr	r3, [pc, #8]	@ (8002108 <_close+0xc>)
 80020fe:	2258      	movs	r2, #88	@ 0x58
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f04f 30ff 	mov.w	r0, #4294967295
 8002106:	4770      	bx	lr
 8002108:	20000394 	.word	0x20000394

0800210c <_fstat>:
 800210c:	4b02      	ldr	r3, [pc, #8]	@ (8002118 <_fstat+0xc>)
 800210e:	2258      	movs	r2, #88	@ 0x58
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f04f 30ff 	mov.w	r0, #4294967295
 8002116:	4770      	bx	lr
 8002118:	20000394 	.word	0x20000394

0800211c <_isatty>:
 800211c:	4b02      	ldr	r3, [pc, #8]	@ (8002128 <_isatty+0xc>)
 800211e:	2258      	movs	r2, #88	@ 0x58
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	2000      	movs	r0, #0
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000394 	.word	0x20000394

0800212c <_lseek>:
 800212c:	4b02      	ldr	r3, [pc, #8]	@ (8002138 <_lseek+0xc>)
 800212e:	2258      	movs	r2, #88	@ 0x58
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f04f 30ff 	mov.w	r0, #4294967295
 8002136:	4770      	bx	lr
 8002138:	20000394 	.word	0x20000394

0800213c <_read>:
 800213c:	4b02      	ldr	r3, [pc, #8]	@ (8002148 <_read+0xc>)
 800213e:	2258      	movs	r2, #88	@ 0x58
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	f04f 30ff 	mov.w	r0, #4294967295
 8002146:	4770      	bx	lr
 8002148:	20000394 	.word	0x20000394

0800214c <_sbrk>:
 800214c:	4a04      	ldr	r2, [pc, #16]	@ (8002160 <_sbrk+0x14>)
 800214e:	6811      	ldr	r1, [r2, #0]
 8002150:	4603      	mov	r3, r0
 8002152:	b909      	cbnz	r1, 8002158 <_sbrk+0xc>
 8002154:	4903      	ldr	r1, [pc, #12]	@ (8002164 <_sbrk+0x18>)
 8002156:	6011      	str	r1, [r2, #0]
 8002158:	6810      	ldr	r0, [r2, #0]
 800215a:	4403      	add	r3, r0
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4770      	bx	lr
 8002160:	200003a4 	.word	0x200003a4
 8002164:	200003a8 	.word	0x200003a8

08002168 <_write>:
 8002168:	4b02      	ldr	r3, [pc, #8]	@ (8002174 <_write+0xc>)
 800216a:	2258      	movs	r2, #88	@ 0x58
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	f04f 30ff 	mov.w	r0, #4294967295
 8002172:	4770      	bx	lr
 8002174:	20000394 	.word	0x20000394

08002178 <_init>:
 8002178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217a:	bf00      	nop
 800217c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800217e:	bc08      	pop	{r3}
 8002180:	469e      	mov	lr, r3
 8002182:	4770      	bx	lr

08002184 <_fini>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr
